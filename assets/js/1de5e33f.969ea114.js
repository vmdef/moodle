(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[65460],{88698:function(e,t,n){"use strict";var a=n(75963);t.Z=void 0;var l=a(n(64938)),r=n(85893),s=(0,l.default)((0,r.jsx)("path",{d:"M5 13.18v4L12 21l7-3.82v-4L12 17l-7-3.82zM12 3 1 9l11 6 9-4.91V17h2V9L12 3z"}),"School");t.Z=s},85162:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var a=n(67294),l=n(86010),r="tabItem_Ymn6";function s(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,s),hidden:n},t)}},65488:function(e,t,n){"use strict";n.d(t,{Z:function(){return m}});var a=n(83117),l=n(67294),r=n(86010),s=n(72389),i=n(67392),o=n(7094),c=n(12466),u="tabList__CuJ",d="tabItem_LNqP";function p(e){var t,n,s=e.lazy,p=e.block,m=e.defaultValue,h=e.values,g=e.groupId,f=e.className,_=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=h?h:_.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,i.l)(k,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(t=null!=m?m:null==(n=_.find((function(e){return e.props.default})))?void 0:n.props.value)?t:_[0].props.value;if(null!==b&&!k.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,o.U)(),$=y.tabGroupChoices,N=y.setTabGroupChoices,q=(0,l.useState)(b),x=q[0],w=q[1],E=[],D=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var R=$[g];null!=R&&R!==x&&k.some((function(e){return e.value===R}))&&w(R)}var S=function(e){var t=e.currentTarget,n=E.indexOf(t),a=k[n].value;a!==x&&(D(t),w(a),null!=g&&N(g,String(a)))},M=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,l=E.indexOf(e.currentTarget)+1;n=null!=(a=E[l])?a:E[0];break;case"ArrowLeft":var r,s=E.indexOf(e.currentTarget)-1;n=null!=(r=E[s])?r:E[E.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":p},f)},k.map((function(e){var t=e.value,n=e.label,s=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return E.push(e)},onKeyDown:M,onFocus:S,onClick:S},s,{className:(0,r.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),s?(0,l.cloneElement)(_.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},_.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,s.Z)();return l.createElement(p,(0,a.Z)({key:String(t)},e))}},32798:function(e){e.exports={siteHome:"https://moodle.academy/",courses:{setup:{id:29,name:"Set up your Moodle Development Environment",summary:"Learn about the Moodle developer community and setting up a development environment",description:"This course is designed for PHP developers who want to start developing Moodle plugins. You will learn about the Moodle developer community and set up a Moodle development environment. This is the first course in the Developer Pathway. Subsequent courses in the the Developer Pathway will build on the knowledge gained in this course.",tags:["development","basics","setup"],archived:!1,series:[]},securityEssentials:{id:53,name:"Moodle Access and Security Essentials",summary:"A short course looking at access control and security aspects of plugins.",description:"In this course we look at access control and security aspects of a plugin. Through a set of tutorials, you will learn how to control access to your plugin using Moodle's Access API. You will learn how to define capabilities in your plugin and how to determine if the user has the permission to access a page. This course also covers common security threats that developers need to be aware of.\n\nThis is the fourth course in the Moodle Developer Basics program.",tags:["development","basic","essentials","security","api"],archived:!1,series:["basics"]},outputEssentials:{id:49,name:"Web Output Essentials",summary:"Learn how to use Moodle's Page and Output APIs to display content in a local plugin.",description:"This course builds on the knowledge gained in the Moodle development environment course. In this course, we learn how to use Moodle's Page and Output APIs to display content in a local plugin. An introduction to localisation using language strings is also covered in this course. This is the second course in the Moodle developer pathway.",tags:["development","basics","essentials","output","api"],archived:!1,series:["basics"]},architecture:{id:51,name:"Moodle's Modular Architecture and APIs",summary:"Take a deeper look at Moodle's architecture, exploring common APIs including Navigations, Forms, Database, Upgrade, Strings, and Output.",description:"In this course we take a deeper look at Moodle's modular architecture and explore the use of common Moodle APIs. Some of the APIs covered in this course include: Navigation, Forms, Database access, Upgrade, Strings and Output APIs. Learners get hands-on practise on using these APIs in the form of developing a local plugin.\n\nThis is the third course in the Moodle Developer Basics program.",tags:["development","api","architecture"],archived:!1,series:["basics"]},pluginBasics:{id:10,name:"Moodle Plugin Development Basics",summary:"Learn about the essential concepts in Moodle's moduel architecture.",description:"This course teaches you essential concepts related to Moodle's modular architecture, enabling you to develop a simple demo plugin.\n\nPlease note, this course is being migrated to form a new program of short courses on Moodle Academy (called 'Moodle Developer Basics'), which will all be available at the end of April 2022. For now you may still complete the course on Learn Moodle, or you might like to start the Moodle Academy developer short courses that are being released over the coming weeks and will form this new beginner level program.",tags:["development","basics","essentials","api","plugins","architecture"],archived:!1,series:["basics"]}}}},50793:function(e,t,n){"use strict";n.d(t,{dn:function(){return x.Z},vL:function(){return q},U6:function(){return y},E2:function(){return w.Z},mQ:function(){return E.Z},Zh:function(){return N}});n(86134);var a=n(67294),l=n(87918),r=n(80102),s=n(83117),i=n(95408),o=n(98700),c=n(39707),u=n(59766),d=n(69348),p=n(54502),m=n(85893);const h=["component","direction","spacing","divider","children"];function g(e,t){const n=a.Children.toArray(e).filter(Boolean);return n.reduce(((e,l,r)=>(e.push(l),r<n.length-1&&e.push(a.cloneElement(t,{key:`separator-${r}`})),e)),[])}const f=(0,d.ZP)("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>[t.root]})((({ownerState:e,theme:t})=>{let n=(0,s.Z)({display:"flex"},(0,i.k9)({theme:t},(0,i.P$)({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e}))));if(e.spacing){const a=(0,o.hB)(t),l=Object.keys(t.breakpoints.values).reduce(((t,n)=>(null==e.spacing[n]&&null==e.direction[n]||(t[n]=!0),t)),{}),r=(0,i.P$)({values:e.direction,base:l}),s=(0,i.P$)({values:e.spacing,base:l}),c=(t,n)=>{return{"& > :not(style) + :not(style)":{margin:0,[`margin${l=n?r[n]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[l]}`]:(0,o.NA)(a,t)}};var l};n=(0,u.Z)(n,(0,i.k9)({theme:t},s,c))}return n})),_=a.forwardRef((function(e,t){const n=(0,p.Z)({props:e,name:"MuiStack"}),a=(0,c.Z)(n),{component:l="div",direction:i="column",spacing:o=0,divider:u,children:d}=a,_=(0,r.Z)(a,h),k={direction:i,spacing:o};return(0,m.jsx)(f,(0,s.Z)({as:l,ownerState:k,ref:t},_,{children:u?g(d,u):d}))}));var k=_,v=n(39960);function b(e,t,n){var r=function(e){return"number"==typeof e&&Number.isInteger(e)?e.toFixed(1):e}(t),s=a.createElement("span",null,function(e){if("since"===e)return"Since";if("deprecated"===e)return"Deprecated";throw new Error("Unknown <Since> type: '"+e+"'")}(e)," ",r),i=a.createElement(l.Z,{key:"chip-"+e+r,label:s,clickable:!!n});return n?a.createElement(v.Z,{to:"https://tracker.moodle.org/browse/"+n,key:"link-"+e+r},i):i}function y(e){var t,n,l,r,s,i,o,c,u,d=(n=(t=e).issueNumber,l=void 0===n?null:n,r=t.type,s=void 0===r?"since":r,i=t.versions,o=void 0===i?[]:i,c=t.version,(u=void 0===c?null:c)?b(s,u,l):o.map((function(e){return b(s,e,l)})));return a.createElement(k,{direction:"row",justifyContent:"flex-end",spacing:2},d)}var $=n(86010);function N(e){return a.createElement("div",{className:(0,$.Z)(" alert alert--success margin-bottom--lg ")},a.createElement("span",{className:(0,$.Z)(" badge badge--success ")},"An example of correct behaviour"),e.children)}function q(e){return a.createElement("div",{className:(0,$.Z)(" alert alert--danger margin-bottom--lg ")},a.createElement("span",{className:(0,$.Z)(" badge badge--danger ")},"An example of incorrect behaviour"),e.children)}n(80069);var x=n(46975),w=n(85162),E=n(65488)},86134:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(67294),l=n(69119),r=n(39960),s=n(88698),i=n(32798),o=n.n(i),c=n(80684);function u(e){var t=e.courseName;if(!o().courses[t])throw Error("Unknown course "+t);var n=o().courses[t];return a.createElement(l.Z,{type:"info",icon:a.createElement(s.Z,{fontSize:"inherit"}),title:"Learn more on Moodle Academy"},"You can learn more about"," ",a.createElement("strong",null,e.subject)," ","from the"," ",a.createElement(c.Z,{title:n.summary},a.createElement(r.Z,{to:o().siteHome+"course/view.php?id="+n.id},n.name))," ","on Moodle Academy.")}},80069:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(67294),l=n(87918),r=n(80684),s=n(86886),i=n(34673),o=n(3905),c=function(e,t,n){return void 0===n&&(n="info"),a.createElement(s.ZP,{item:!0,key:e},a.createElement(r.Z,{title:t},a.createElement(l.Z,{label:e,color:n})))};function u(e){var t=e.filepath,n=e.summary,l=function(e){var t=e.required,n=void 0!==t&&t,a=e.legacy,l=void 0!==a&&a,r=e.deprecated,s=void 0!==r&&r,i=e.refreshedDuringUpgrade,o=void 0!==i&&i,u=e.refreshedDuringPurge,d=void 0!==u&&u,p=[];return o&&p.push(c("Upgradable","Changes to this file or directory will be re-applied during a Moodle upgrade. If you make any changes to it, you can simply increment the version number and perform a Moodle upgrade.","info")),d&&p.push(c("Refreshed on cache purge","The contents of this file or directory are cached. To see your changes you can simply purge Moodle's caches and refresh the page.","info")),n&&p.push(c("Required","This file must be present","success")),l&&p.push(c("Legacy","Use of this file is being phased out. It is still supported for older installations but will be removed..","warning")),s&&p.push(c("Deprecated","Use of this file is deprecated and not recommended.It may still be provided for older versions of Moodle but is no longer used.","error")),p}(e),r=e.description?a.createElement(s.ZP,{item:!0,xs:12},e.description):null;return a.createElement(o.Zo,null,a.createElement(s.ZP,{container:!0,spacing:2},a.createElement(s.ZP,{item:!0,xs:6},a.createElement("h4",null,n)),a.createElement(s.ZP,{item:!0,xs:6},a.createElement(s.ZP,{container:!0,spacing:2,justifyContent:"flex-end"},l)),a.createElement(s.ZP,{item:!0,xs:12},a.createElement("h5",null,"File path:"," ",t)),r,function(e){var t=e.example,n=e.open,l=void 0!==n&&n;return t?a.createElement(s.ZP,{item:!0,xs:12},a.createElement(i.Z,{summary:a.createElement("summary",null,"View example"),open:l},t)):null}(e)))}},86025:function(e,t,n){"use strict";n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return m}});var a=n(83117),l=n(80102),r=(n(67294),n(3905)),s=n(13904),i=n(50793),o=["components"],c={title:"Data manipulation API",tags:["DB","XMLDB","API","core","core_dml"]},u=void 0,d={unversionedId:"apis/core/dml/index",id:"apis/core/dml/index",title:"Data manipulation API",description:"This page describes the functions available to access data in the Moodle database. You should exclusively use these functions in order to retrieve or modify database content because these functions provide a high level of abstraction and guarantee that your database manipulation will work against different RDBMSes.",source:"@site/docs/apis/core/dml/index.md",sourceDirName:"apis/core/dml",slug:"/apis/core/dml/",permalink:"/devdocs/docs/apis/core/dml/",draft:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/core/dml/index.md",tags:[{label:"DB",permalink:"/devdocs/docs/tags/db"},{label:"XMLDB",permalink:"/devdocs/docs/tags/xmldb"},{label:"API",permalink:"/devdocs/docs/tags/api"},{label:"core",permalink:"/devdocs/docs/tags/core"},{label:"core_dml",permalink:"/devdocs/docs/tags/core-dml"}],version:"current",lastUpdatedBy:"Andrew Lyons",lastUpdatedAt:1655463803,formattedLastUpdatedAt:"17/06/2022",frontMatter:{title:"Data manipulation API",tags:["DB","XMLDB","API","core","core_dml"]},sidebar:"docs",previous:{title:"Core APIs",permalink:"/devdocs/docs/apis/core/"},next:{title:"Data definition API",permalink:"/devdocs/docs/apis/core/dml/ddl"}},p={},m=[{value:"General concepts",id:"general-concepts",level:2},{value:"DB object",id:"db-object",level:3},{value:"Table prefix",id:"table-prefix",level:3},{value:"Conditions",id:"conditions",level:3},{value:"Placeholders",id:"placeholders",level:3},{value:"Strictness",id:"strictness",level:3},{value:"Getting a single record",id:"getting-a-single-record",level:2},{value:"get_record",id:"get_record",level:3},{value:"get_record_select",id:"get_record_select",level:3},{value:"get_record_sql",id:"get_record_sql",level:3},{value:"Getting a hashed array of records",id:"getting-a-hashed-array-of-records",level:2},{value:"get_records",id:"get_records",level:3},{value:"get_records_select",id:"get_records_select",level:3},{value:"get_records_sql",id:"get_records_sql",level:3},{value:"get_records_list",id:"get_records_list",level:3},{value:"Getting data as key/value pairs in an associative array",id:"getting-data-as-keyvalue-pairs-in-an-associative-array",level:2},{value:"get_records_menu",id:"get_records_menu",level:3},{value:"get_records_select_menu",id:"get_records_select_menu",level:3},{value:"get_records_sql_menu",id:"get_records_sql_menu",level:3},{value:"Counting records that match the given criteria",id:"counting-records-that-match-the-given-criteria",level:2},{value:"count_records",id:"count_records",level:3},{value:"count_records_select",id:"count_records_select",level:3},{value:"count_records_sql",id:"count_records_sql",level:3},{value:"Checking if a given record exists",id:"checking-if-a-given-record-exists",level:2},{value:"record_exists",id:"record_exists",level:3},{value:"record_exists_select",id:"record_exists_select",level:3},{value:"record_exists_sql",id:"record_exists_sql",level:3},{value:"Getting a particular field value from one record",id:"getting-a-particular-field-value-from-one-record",level:2},{value:"get_field",id:"get_field",level:3},{value:"get_field_select",id:"get_field_select",level:3},{value:"get_field_sql",id:"get_field_sql",level:3},{value:"Getting field values from multiple records",id:"getting-field-values-from-multiple-records",level:2},{value:"get_fieldset_select",id:"get_fieldset_select",level:3},{value:"get_fieldset_sql",id:"get_fieldset_sql",level:3},{value:"Setting a field value",id:"setting-a-field-value",level:2},{value:"set_field",id:"set_field",level:3},{value:"set_field_select",id:"set_field_select",level:3},{value:"Deleting records",id:"deleting-records",level:2},{value:"delete_records",id:"delete_records",level:3},{value:"delete_records_select",id:"delete_records_select",level:3},{value:"Inserting records",id:"inserting-records",level:2},{value:"insert_record",id:"insert_record",level:3},{value:"insert_records",id:"insert_records",level:3},{value:"insert_record_raw",id:"insert_record_raw",level:3},{value:"Updating records",id:"updating-records",level:2},{value:"update_record",id:"update_record",level:3},{value:"Executing a custom query",id:"executing-a-custom-query",level:2},{value:"execute",id:"execute",level:3},{value:"Using recordsets",id:"using-recordsets",level:2},{value:"get_recordset",id:"get_recordset",level:3},{value:"get_recordset_select",id:"get_recordset_select",level:3},{value:"get_recordset_sql",id:"get_recordset_sql",level:3},{value:"get_recordset_list",id:"get_recordset_list",level:3},{value:"Delegated transactions",id:"delegated-transactions",level:2},{value:"Example",id:"example",level:3},{value:"Cross-DB compatibility",id:"cross-db-compatibility",level:2},{value:"sql_bitand",id:"sql_bitand",level:3},{value:"sql_bitnot",id:"sql_bitnot",level:3},{value:"sql_bitor",id:"sql_bitor",level:3},{value:"sql_bitxor",id:"sql_bitxor",level:3},{value:"sql_null_from_clause",id:"sql_null_from_clause",level:3},{value:"sql_ceil",id:"sql_ceil",level:3},{value:"sql_equal",id:"sql_equal",level:3},{value:"sql_like",id:"sql_like",level:3},{value:"sql_like_escape",id:"sql_like_escape",level:3},{value:"sql_length",id:"sql_length",level:3},{value:"sql_modulo",id:"sql_modulo",level:3},{value:"sql_position",id:"sql_position",level:3},{value:"sql_substr",id:"sql_substr",level:3},{value:"sql_cast_char2int",id:"sql_cast_char2int",level:3},{value:"sql_cast_char2real",id:"sql_cast_char2real",level:3},{value:"sql_compare_text",id:"sql_compare_text",level:3},{value:"sql_order_by_text",id:"sql_order_by_text",level:3},{value:"sql_concat",id:"sql_concat",level:3},{value:"sql_group_concat",id:"sql_group_concat",level:3},{value:"sql_concat_join",id:"sql_concat_join",level:3},{value:"sql_fullname",id:"sql_fullname",level:3},{value:"sql_isempty",id:"sql_isempty",level:3},{value:"sql_isnotempty",id:"sql_isnotempty",level:3},{value:"get_in_or_equal",id:"get_in_or_equal",level:3},{value:"sql_regex_supported",id:"sql_regex_supported",level:3},{value:"sql_regex",id:"sql_regex",level:3},{value:"sql_intersect",id:"sql_intersect",level:3},{value:"Debugging",id:"debugging",level:2},{value:"set_debug",id:"set_debug",level:3},{value:"Special cases",id:"special-cases",level:2},{value:"get_course",id:"get_course",level:3},{value:"get_courses",id:"get_courses",level:3},{value:"See also",id:"see-also",level:2}],h={toc:m};function g(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,(0,a.Z)({frontMatter:c},void 0!==d?{metadata:d}:{},{mdxType:"MoodlePageBanner"})),(0,r.kt)("p",null,"This page describes the functions available to access data in the Moodle database. You should ",(0,r.kt)("strong",{parentName:"p"},"exclusively")," use these functions in order to retrieve or modify database content because these functions provide a high level of abstraction and guarantee that your database manipulation will work against different RDBMSes."),(0,r.kt)("p",null,"Where possible, tricks and examples will be documented here in order to make developers' lives a bit easier. Of course, feel free to clarify, complete and add more information to this documentation. It will be welcome, absolutely!"),(0,r.kt)("h2",{id:"general-concepts"},"General concepts"),(0,r.kt)("h3",{id:"db-object"},"DB object"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The data manipulation API is exposed via public methods of the ",(0,r.kt)("tt",null,"$DB")," object."),(0,r.kt)("li",{parentName:"ul"},"Moodle core takes care of setting up the connection to the database according to values specified in the main config.php file."),(0,r.kt)("li",{parentName:"ul"},"The $DB global object is an instance of the ",(0,r.kt)("tt",null,"moodle_database")," class. It is instantiated automatically during the bootstrap setup, i.e. as a part of including the main config.php file."),(0,r.kt)("li",{parentName:"ul"},"The DB object is available in the global scope right after including the config.php file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="example.php"',title:'"example.php"'},"<?php\nrequire(__DIR__ . '/config.php');\n\n// You can access the database via the $DB method calls here.\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To make the DB object available in your local scope, such as within a function:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="example.php"',title:'"example.php"'},"<?php\n\nfunction my_function_making_use_of_database() {\n    global $DB;\n\n    // You can access the database via the $DB method calls here.\n}\n")),(0,r.kt)("h3",{id:"table-prefix"},"Table prefix"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Most Moodle installations use a prefix for all the database tables, such as ",(0,r.kt)("tt",null,"mdl_"),". This prefix is NOT to be used in the code in the code itself."),(0,r.kt)("li",{parentName:"ul"},"All the ",(0,r.kt)("inlineCode",{parentName:"li"},"$table")," parameters in the functions are meant to be the table name without prefixes:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$user = $DB->get_record('user', [ => '1']('id'));\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In custom SQL queries, table names must be enclosed between curly braces. They will be then automatically converted to the real prefixed table name. There is no need to access ",(0,r.kt)("tt",null,"$CFG->prefix"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$user = $DB->get_record_sql('SELECT COUNT(*) FROM {user} WHERE deleted = 1 OR suspended = 1;');\n")),(0,r.kt)("h3",{id:"conditions"},"Conditions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the ",(0,r.kt)("inlineCode",{parentName:"li"},"$conditions")," parameters in the functions are arrays of ",(0,r.kt)("inlineCode",{parentName:"li"},"fieldname => fieldvalue")," elements."),(0,r.kt)("li",{parentName:"ul"},"They all must be fulfilled - that is the logical ",(0,r.kt)("tt",null,"AND")," is used to populate the actual ",(0,r.kt)("tt",null,"WHERE")," statement")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$user = $DB->get_record('user', ['firstname'  => 'Martin', 'lastname'  => 'Dougiamas']);\n")),(0,r.kt)("h3",{id:"placeholders"},"Placeholders"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the ",(0,r.kt)("inlineCode",{parentName:"li"},"$params")," parameters in the functions are arrays of values used to fill placeholders in SQL statements."),(0,r.kt)("li",{parentName:"ul"},"Placeholders help to avoid problems with SQL-injection and/or invalid quotes in SQL queries. They facilitate secure and cross-db compatible code."),(0,r.kt)("li",{parentName:"ul"},"Two types of placeholders are supported - question marks (",(0,r.kt)("tt",null,"SQL_PARAMS_QM"),") and named placeholders (",(0,r.kt)("tt",null,"SQL_PARAMS_NAMED"),")."),(0,r.kt)("li",{parentName:"ul"},"Named params ",(0,r.kt)("strong",{parentName:"li"},"must be unique")," even if the value passed is the same. If you need to pass the same value multiple times, you need to have multiple distinct named parameters.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Example of using question-mark placeholders"',title:'"Example',of:!0,using:!0,"question-mark":!0,'placeholders"':!0},"$DB->get_record_sql(\n    'SELECT * FROM {user} WHERE firstname = ? AND lastname = ?',\n    [\n        'Martin',\n        'Dougiamas',\n    ]\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Example of using named placeholders"',title:'"Example',of:!0,using:!0,named:!0,'placeholders"':!0},"$DB->get_record_sql(\n    'SELECT * FROM {user} WHERE firstname = :firstname AND lastname = :lastname',\n    [\n        'firstname'  => 'Martin',\n        'lastname'  => 'Dougiamas',\n    ]\n);\n")),(0,r.kt)("h3",{id:"strictness"},"Strictness"),(0,r.kt)("p",null,"Some methods accept the ",(0,r.kt)("tt",null,"$strictness")," parameter affecting the method behaviour. Supported modes are specified using the constants:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("tt",null,"MUST_EXIST")," - In this mode, the requested record must exist and must be unique. An exception will be thrown if no record is found or multiple matching records are found."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("tt",null,"IGNORE_MISSING")," - In this mode, a missing record is not an error. False boolean is returned if the requested record is not found. If more records are found, a debugging message is displayed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("tt",null,"IGNORE_MULTIPLE")," - This is not a recommended mode. The function will silently ignore multiple records found and will return just the first one of them.")),(0,r.kt)("h2",{id:"getting-a-single-record"},"Getting a single record"),(0,r.kt)("h3",{id:"get_record"},"get_record"),(0,r.kt)("p",null,"Return a single database record as an object where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_record(\n    $table,\n    array $conditions,\n    $fields = '*',\n    $strictness = IGNORE_MISSING\n);\n")),(0,r.kt)("h3",{id:"get_record_select"},"get_record_select"),(0,r.kt)("p",null,"Return a single database record as an object where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_record_select(\n    $table,\n    $select,\n    array $params = null,\n    $fields = '*',\n    $strictness = IGNORE_MISSING\n);\n")),(0,r.kt)("h3",{id:"get_record_sql"},"get_record_sql"),(0,r.kt)("p",null,"Return a single database record as an object using a custom SELECT query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_record_sql(\n    $sql,\n    array $params = null,\n    $strictness = IGNORE_MISSING\n);\n")),(0,r.kt)("h2",{id:"getting-a-hashed-array-of-records"},"Getting a hashed array of records"),(0,r.kt)("p",null,'Each of the following methods return an array of objects. The array is indexed by the first column of the fields returned by the query. To assure consistency, it is a good practice to ensure that your query include an "id column" as the first field. When designing custom tables, make ',(0,r.kt)("tt",null,"id")," their first column and primary key."),(0,r.kt)("h3",{id:"get_records"},"get_records"),(0,r.kt)("p",null,"Return a list of records as an array of objects where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_records(\n    $table,\n    array $conditions = null,\n    $sort = '',\n    $fields = '*',\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h3",{id:"get_records_select"},"get_records_select"),(0,r.kt)("p",null,"Return a list of records as an array of objects where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_records_select(\n    $table,\n    $select,\n    array $params = null,\n    $sort = '',\n    $fields = '*',\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"$fields")," parameter is a comma separated list of fields to return (optional, by default all fields are returned)."),(0,r.kt)("h3",{id:"get_records_sql"},"get_records_sql"),(0,r.kt)("p",null,"Return a list of records as an array of objects using a custom SELECT query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_records_sql(\n    $sql,\n    array $params = null,\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h3",{id:"get_records_list"},"get_records_list"),(0,r.kt)("p",null,"Return a list of records as an array of objects where the given field matches one of the possible values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_records_list(\n    $table,\n    $field,\n    array $values,\n    $sort = *,\n    $fields = '*',\n    $limitfrom = *,\n    $limitnum = ''\n)\n")),(0,r.kt)("h2",{id:"getting-data-as-keyvalue-pairs-in-an-associative-array"},"Getting data as key/value pairs in an associative array"),(0,r.kt)("h3",{id:"get_records_menu"},"get_records_menu"),(0,r.kt)("p",null,"Return the first two columns from a list of records as an associative array where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_records_menu(\n    $table,\n    array $conditions = null,\n    $sort = '',\n    $fields = '*',\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h3",{id:"get_records_select_menu"},"get_records_select_menu"),(0,r.kt)("p",null,"Return the first two columns from a list of records as an associative array where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_records_select_menu(\n    $table,\n    $select,\n    array $params = null,\n    $sort = '',\n    $fields = '*',\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h3",{id:"get_records_sql_menu"},"get_records_sql_menu"),(0,r.kt)("p",null,"Return the first two columns from a number of records as an associative array using a custom SELECT query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_records_sql_menu(\n    $sql,\n    array $params = null,\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h2",{id:"counting-records-that-match-the-given-criteria"},"Counting records that match the given criteria"),(0,r.kt)("h3",{id:"count_records"},"count_records"),(0,r.kt)("p",null,"Count the records in a table where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function count_records(\n    $table,\n    array $conditions = null\n);\n")),(0,r.kt)("h3",{id:"count_records_select"},"count_records_select"),(0,r.kt)("p",null,"Count the records in a table where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function count_records_select(\n    $table,\n    $select,\n    array $params = null,\n    $countitem = \"COUNT('x')\"\n);\n")),(0,r.kt)("h3",{id:"count_records_sql"},"count_records_sql"),(0,r.kt)("p",null,"Counting the records using a custom SELECT COUNT(...) query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function count_records_sql(\n    $sql,\n    array $params = null\n);\n")),(0,r.kt)("h2",{id:"checking-if-a-given-record-exists"},"Checking if a given record exists"),(0,r.kt)("h3",{id:"record_exists"},"record_exists"),(0,r.kt)("p",null,"Test whether a record exists in a table where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function record_exists(\n    $table,\n    array $conditions = null\n);\n")),(0,r.kt)("h3",{id:"record_exists_select"},"record_exists_select"),(0,r.kt)("p",null,"Test whether any records exists in a table where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function record_exists_select(\n    $table,\n    $select,\n    array $params = null\n);\n")),(0,r.kt)("h3",{id:"record_exists_sql"},"record_exists_sql"),(0,r.kt)("p",null,"Test whether the given SELECT query would return any record."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function record_exists_sql(\n    $sql,\n    array $params = null\n);\n")),(0,r.kt)("h2",{id:"getting-a-particular-field-value-from-one-record"},"Getting a particular field value from one record"),(0,r.kt)("h3",{id:"get_field"},"get_field"),(0,r.kt)("p",null,"Get a single field value from a table record where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_field(\n    $table,\n    $return,\n    array $conditions,\n    $strictness = IGNORE_MISSING\n);\n")),(0,r.kt)("h3",{id:"get_field_select"},"get_field_select"),(0,r.kt)("p",null,"Get a single field value from a table record where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_field_select(\n    $table,\n    $return,\n    $select,\n    array $params = null,\n    $strictness = IGNORE_MISSING\n);\n")),(0,r.kt)("h3",{id:"get_field_sql"},"get_field_sql"),(0,r.kt)("p",null,"Get a single field value (first field) using a custom SELECT query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_field_sql(\n    $sql,\n    array $params = null,\n    $strictness = IGNORE_MISSING\n);\n")),(0,r.kt)("h2",{id:"getting-field-values-from-multiple-records"},"Getting field values from multiple records"),(0,r.kt)("h3",{id:"get_fieldset_select"},"get_fieldset_select"),(0,r.kt)("p",null,"Return values of the given field as an array where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_fieldset_select(\n    $table,\n    $return,\n    $select,\n    array $params = null\n);\n")),(0,r.kt)("h3",{id:"get_fieldset_sql"},"get_fieldset_sql"),(0,r.kt)("p",null,"Return values of the first column as an array using a custom SELECT field FROM ... query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_fieldset_sql(\n    $sql,\n    array $params = null\n);\n")),(0,r.kt)("h2",{id:"setting-a-field-value"},"Setting a field value"),(0,r.kt)("h3",{id:"set_field"},"set_field"),(0,r.kt)("p",null,"Set a single field in every record where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function set_field(\n    $table,\n    $newfield,\n    $newvalue,\n    array $conditions = null\n);\n")),(0,r.kt)("h3",{id:"set_field_select"},"set_field_select"),(0,r.kt)("p",null,"Set a single field in every table record where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function set_field_select(\n    $table,\n    $newfield,\n    $newvalue,\n    $select,\n    array $params = null\n);\n")),(0,r.kt)("h2",{id:"deleting-records"},"Deleting records"),(0,r.kt)("h3",{id:"delete_records"},"delete_records"),(0,r.kt)("p",null,"Delete records from the table where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function delete_records(\n    $table,\n    array $conditions = null\n);\n")),(0,r.kt)("h3",{id:"delete_records_select"},"delete_records_select"),(0,r.kt)("p",null,"Delete records from the table where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function delete_records_select(\n    $table,\n    $select,\n    array $params = null\n);\n")),(0,r.kt)("h2",{id:"inserting-records"},"Inserting records"),(0,r.kt)("h3",{id:"insert_record"},"insert_record"),(0,r.kt)("p",null,'Insert the given data object into the table and return the "id" of the newly created record.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function insert_record(\n    $table,\n    $dataobject,\n    $returnid = true,\n    $bulk = false\n);\n")),(0,r.kt)("h3",{id:"insert_records"},"insert_records"),(0,r.kt)("p",null,"Insert multiple records into the table as fast as possible. Records are inserted in the given order, but the operation is not atomic. Use transactions if necessary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function insert_records(\n    $table,\n    $dataobjects\n);\n")),(0,r.kt)("h3",{id:"insert_record_raw"},"insert_record_raw"),(0,r.kt)("p",null,"For rare cases when you also need to specify the ID of the record to be inserted."),(0,r.kt)("h2",{id:"updating-records"},"Updating records"),(0,r.kt)("h3",{id:"update_record"},"update_record"),(0,r.kt)("p",null,'Update a record in the table. The data object must have the property "id" set.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function update_record(\n    $table,\n    $dataobject,\n    $bulk = false\n);\n")),(0,r.kt)("h2",{id:"executing-a-custom-query"},"Executing a custom query"),(0,r.kt)("h3",{id:"execute"},"execute"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'If you need to perform a complex update using arbitrary SQL, you can use the low level "execute" method. Only use this when no specialised method exists.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function execute(\n    $sql,\n    array $params = null\n);\n")),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Do NOT use this to make changes in database structure, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"database_manager")," methods instead."))),(0,r.kt)("h2",{id:"using-recordsets"},"Using recordsets"),(0,r.kt)("p",null,"If the number of records to be retrieved from DB is high, the 'get_records_xxx() functions above are far from optimal, because they load all the records into the memory via the returned array. Under those circumstances, it is highly recommended to use these ",(0,r.kt)("inlineCode",{parentName:"p"},"get_recordset_xxx()")," functions instead. They return an iterator to iterate over all the found records and save a lot of memory."),(0,r.kt)("p",null,"It is ",(0,r.kt)("strong",{parentName:"p"},"absolutely important")," to not forget to close the returned recordset iterator after using it. This is to free up a lot of resources in the RDBMS."),(0,r.kt)("p",null,"A general way to iterate over records using the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_recordset_xxx()")," functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$rs = $DB->get_recordset(....);\nforeach ($rs as $record) {\n    // Do whatever you want with this record\n}\n$rs->close();\n")),(0,r.kt)("p",null,"Unlike get_record functions, you cannot check if ",(0,r.kt)("tt",null,"$rs  = = true")," or ",(0,r.kt)("tt",null,"!empty($rs)")," to determine if any records were found. Instead, if you need to, you can use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"if ($rs->valid()) {\n    // The recordset contains some records.\n}\n")),(0,r.kt)("h3",{id:"get_recordset"},"get_recordset"),(0,r.kt)("p",null,"Return a list of records as a moodle_recordset where all the given conditions are met."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_recordset(\n    $table,\n    array $conditions = null,\n    $sort = '',\n    $fields = '*',\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h3",{id:"get_recordset_select"},"get_recordset_select"),(0,r.kt)("p",null,"Return a list of records as a moodle_recordset where the given conditions are used in the WHERE clause."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_recordset_select(\n    $table,\n    $select,\n    array $params = null,\n    $sort = '',\n    $fields = '*',\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h3",{id:"get_recordset_sql"},"get_recordset_sql"),(0,r.kt)("p",null,"Return a list of records as a moodle_recordset using a custom SELECT query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_recordset_sql(\n    $sql,\n    array $params = null,\n    $limitfrom = 0,\n    $limitnum = 0\n);\n")),(0,r.kt)("h3",{id:"get_recordset_list"},"get_recordset_list"),(0,r.kt)("p",null,"Return a list of records as a moodle_recordset where the given field matches one of the possible values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_recordset_list(\n    $table,\n    $field,\n    array $values,\n    $sort = *,\n    $fields = '*',\n    $limitfrom = *,\n    $limitnum = ''\n);\n")),(0,r.kt)("h2",{id:"delegated-transactions"},"Delegated transactions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Please note some databases do not support transactions (such as the MyISAM MySQL database engine), however all server administrators are strongly encouraged to migrate to databases that support transactions (such as the InnoDB MySQL database engine)."),(0,r.kt)("li",{parentName:"ul"},"Previous versions supported only one level of transaction. Since Moodle 2.0, the DML layer emulates delegated transactions that allow nesting of transactions."),(0,r.kt)("li",{parentName:"ul"},"Some subsystems (such as messaging) do not support transactions because it is not possible to rollback in external systems.\nA transaction is started by:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$transaction = $DB->start_delegated_transaction();\n")),(0,r.kt)("p",null,"and finished by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$transaction->allow_commit();\n")),(0,r.kt)("p",null,"Usually a transaction is rolled back when an exception is thrown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$transaction->rollback($ex);\n")),(0,r.kt)("p",null,"which must be used very carefully because it might break compatibility with databases that do not support transactions. Transactions cannot be used as part of expected code flow; they can be used only as an emergency protection of data consistency."),(0,r.kt)("p",null,"::: More information"),(0,r.kt)("p",null,"For more information see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/DB_layer_2.0_delegated_transactions"},"DB layer 2.0 delegated transactions")," or ",(0,r.kt)("a",{parentName:"p",href:"https://tracker.moodle.org/browse/MDL-20625"},"MDL-20625"),"."),(0,r.kt)("p",null,":::"),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"global $DB;\ntry {\n     $transaction = $DB->start_delegated_transaction();\n     $DB->insert_record('foo', $object);\n     $DB->insert_record('bar', $otherobject);\n\n     // Assuming the both inserts work, we get to the following line.\n     $transaction->allow_commit();\n\n} catch(Exception $e) {\n     $transaction->rollback($e);\n}\n")),(0,r.kt)("h2",{id:"cross-db-compatibility"},"Cross-DB compatibility"),(0,r.kt)("p",null,"Moodle supports several SQL servers, including MySQL, MariaDB, PostgreSQL, MS-SQL and Oracle. These may have specific syntax in certain cases. In order to achieve cross-db compatibility of the code, the following functions must be used to generate the fragments of the query valid for the actual SQL server."),(0,r.kt)("h3",{id:"sql_bitand"},"sql_bitand"),(0,r.kt)("p",null,"Return the SQL text to be used in order to perform a bitwise AND operation between 2 integers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_bitand(\n    $int1,\n    $int2\n);\n")),(0,r.kt)("h3",{id:"sql_bitnot"},"sql_bitnot"),(0,r.kt)("p",null,"Return the SQL text to be used in order to perform a bitwise NOT operation on the given integer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_bitnot(\n    $int1\n);\n")),(0,r.kt)("h3",{id:"sql_bitor"},"sql_bitor"),(0,r.kt)("p",null,"Return the SQL text to be used in order to perform a bitwise OR operation between 2 integers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_bitor(\n    $int1,\n    $int2\n);\n")),(0,r.kt)("h3",{id:"sql_bitxor"},"sql_bitxor"),(0,r.kt)("p",null,"Return the SQL text to be used in order to perform a bitwise XOR operation between 2 integers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_bitxor(\n    $int1,\n    $int2\n);\n")),(0,r.kt)("h3",{id:"sql_null_from_clause"},"sql_null_from_clause"),(0,r.kt)("p",null,"Return an empty FROM clause required by some DBs in all SELECT statements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_null_from_clause()\n")),(0,r.kt)("h3",{id:"sql_ceil"},"sql_ceil"),(0,r.kt)("p",null,"Return the correct CEIL expression applied to the given fieldname."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_ceil(\n    $fieldname\n);\n")),(0,r.kt)("h3",{id:"sql_equal"},"sql_equal"),(0,r.kt)(i.U6,{version:"3.2",mdxType:"Since"}),(0,r.kt)("p",null,"Return the query fragment to perform cross-db varchar comparisons when case-sensitiveness is important."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_equal(\n    $fieldname,\n    $param,\n    $casesensitive = true,\n    $accentsensitive = true,\n    $notequal = false\n);\n")),(0,r.kt)("h3",{id:"sql_like"},"sql_like"),(0,r.kt)("p",null,"Return the query fragment to perform the LIKE comparison."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$DB->sql_like(\n    $fieldname,\n    $param,\n    $casesensitive = true,\n    $accentsensitive = true,\n    $notlike = false,\n    $escapechar = ' \\\\ '\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"title='Example: Searching for records partially matching the given hard-coded literal'",title:"'Example:",Searching:!0,for:!0,records:!0,partially:!0,matching:!0,the:!0,given:!0,"hard-coded":!0,"literal'":!0},"$likeidnumber = $DB->sql_like('idnumber', ':idnum');\n$DB->get_records_sql(\n    \"SELECT id, fullname FROM {course} WHERE {$likeidnumber}\",\n    [\n        'idnum' => 'DEMO-%',\n    ]\n);\n")),(0,r.kt)("p",null,"See below if you need to compare with a value submitted by the user."),(0,r.kt)("h3",{id:"sql_like_escape"},"sql_like_escape"),(0,r.kt)("p",null,"Escape the value submitted by the user so that it can be used for partial comparison and the special characters like '_' or '%' behave as literal characters, not wildcards."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$DB->sql_like_escape(\n    $text,\n    $escapechar = '\\\\'\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Example: If you need to perform a partial comparison with a value that has been submitted by the user"',title:'"Example:',If:!0,you:!0,need:!0,to:!0,perform:!0,a:!0,partial:!0,comparison:!0,with:!0,value:!0,that:!0,has:!0,been:!0,submitted:!0,by:!0,the:!0,'user"':!0},"$search = required_param('search', PARAM_RAW);\n\n$likefullname = $DB->sql_like('fullname', ':fullname');\n$DB->get_records_sql(\n    \"SELECT id, fullname FROM {course} WHERE {$likefullname}\",\n    [\n        'fullname'  => '%' . $DB->sql_like_escape($search) . '%',\n    ]\n);\n")),(0,r.kt)("h3",{id:"sql_length"},"sql_length"),(0,r.kt)("p",null,"Return the query fragment to be used to calculate the length of the expression in characters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_length(\n    $fieldname\n);\n")),(0,r.kt)("h3",{id:"sql_modulo"},"sql_modulo"),(0,r.kt)("p",null,"Return the query fragment to be used to calculate the remainder after division."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_modulo(\n    $int1,\n    $int2\n);\n")),(0,r.kt)("h3",{id:"sql_position"},"sql_position"),(0,r.kt)("p",null,"Return the query fragment for searching a string for the location of a substring. If both needle and haystack use placeholders, you must use named placeholders."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_position(\n    $needle,\n    $haystack\n);\n")),(0,r.kt)("h3",{id:"sql_substr"},"sql_substr"),(0,r.kt)("p",null,"Return the query fragment for extracting a substring from the given expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_substr(\n    $expr,\n    $start,\n    $length = false\n);\n")),(0,r.kt)("h3",{id:"sql_cast_char2int"},"sql_cast_char2int"),(0,r.kt)("p",null,"Return the query fragment to cast a CHAR column to INTEGER"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_cast_char2int(\n    $fieldname,\n    $text = false\n);\n")),(0,r.kt)("h3",{id:"sql_cast_char2real"},"sql_cast_char2real"),(0,r.kt)("p",null,"Return the query fragment to cast a CHAR column to REAL (float) number"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_cast_char2real(\n    $fieldname,\n    $text = false\n);\n")),(0,r.kt)("h3",{id:"sql_compare_text"},"sql_compare_text"),(0,r.kt)("p",null,"Return the query fragment to be used when comparing a TEXT (clob) column with a given string or a VARCHAR field (some RDBMs do not allow for direct comparison)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_compare_text(\n    $fieldname,\n    $numchars = 32\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Example"',title:'"Example"'},"$comparedescription = $DB->sql_compare_text('description');\n$comparedescription = $DB->sql_compare_text(':description');\n$todogroups = $DB->get_records_sql(\n    \"SELECT id FROM {group} WHERE {$comparedescription} = {$comparedescriptionplaceholder}\",\n    [\n        'description' => 'TODO',\n    ]\n);\n")),(0,r.kt)("h3",{id:"sql_order_by_text"},"sql_order_by_text"),(0,r.kt)("p",null,"Return the query fragment to be used to get records ordered by a TEXT (clob) column. Note this affects the performance badly and should be avoided if possible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_order_by_text(\n    $fieldname,\n    $numchars = 32\n);\n")),(0,r.kt)("h3",{id:"sql_concat"},"sql_concat"),(0,r.kt)("p",null,"Return the query fragment to concatenate all given parameters into one string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_concat(...)\n")),(0,r.kt)("p",null,"There is a gotcha if you are trying to concat fields which may be null which result in the entire result being null:"),(0,r.kt)(i.vL,{mdxType:"InvalidExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_concat('requiredfield', 'optionalfield');\n"))),(0,r.kt)("p",null,"You must cast or coalesce every nullable argument, for example:"),(0,r.kt)(i.Zh,{mdxType:"ValidExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_concat('requiredfield', \"COALESCE(optionalfield, '')\");\n"))),(0,r.kt)("h3",{id:"sql_group_concat"},"sql_group_concat"),(0,r.kt)(i.U6,{version:"3.11",mdxType:"Since"}),(0,r.kt)("p",null,"Return SQL for performing group concatenation on given field/expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_group_concat(string $field, string $separator = ', ', string $sort = '')\n")),(0,r.kt)("h3",{id:"sql_concat_join"},"sql_concat_join"),(0,r.kt)("p",null,"Return the query fragment to concatenate all given elements into one string using the given separator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_concat_join(\n    $separator = \"' '\",\n    $elements = []]\n);\n")),(0,r.kt)("h3",{id:"sql_fullname"},"sql_fullname"),(0,r.kt)("p",null,"Return the query fragment to concatenate the given $firstname and $lastname"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_fullname(\n    $first = 'firstname',\n    $last = 'lastname'\n);\n")),(0,r.kt)("h3",{id:"sql_isempty"},"sql_isempty"),(0,r.kt)("p",null,"Return the query fragment to check if the field is empty"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_isempty(\n    $tablename,\n    $fieldname,\n    $nullablefield,\n    $textfield\n);\n")),(0,r.kt)("h3",{id:"sql_isnotempty"},"sql_isnotempty"),(0,r.kt)("p",null,"Return the query fragment to check if the field is not empty"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_isnotempty(\n    $tablename,\n    $fieldname,\n    $nullablefield,\n    $textfield\n);\n")),(0,r.kt)("h3",{id:"get_in_or_equal"},"get_in_or_equal"),(0,r.kt)("p",null,"Return the query fragment to check if a value is IN the given list of items (with a fallback to plain equal comparison if there is just one item)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function get_in_or_equal(\n    $items,\n    $type = SQL_PARAMS_QM,\n    $prefix = 'param',\n    $equal = true,\n    $onemptyitems = false\n);\n")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$statuses = ['todo', 'open', 'inprogress', 'intesting'];\n[$insql, $inparams] = $DB->get_in_or_equal($statuses);\n$sql = \"SELECT * FROM {bugtracker_issues} WHERE status $insql\";\n$bugs = $DB->get_records_sql($sql, $inparams);\n")),(0,r.kt)("p",null,"An example using named params:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"[$insql, $params] = $DB->get_in_or_equal($contexts, SQL_PARAMS_NAMED, 'ctx');\n$contextsql = \"AND rc.contextid {$insql}\";\n")),(0,r.kt)("h3",{id:"sql_regex_supported"},"sql_regex_supported"),(0,r.kt)("p",null,"Does the current database driver support regex syntax when searching?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_regex_supported()\n")),(0,r.kt)("h3",{id:"sql_regex"},"sql_regex"),(0,r.kt)("p",null,"Return the query fragment to perform a regex search."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_regex(\n    $positivematch = true,\n    $casesensitive = false\n);\n")),(0,r.kt)("p",null,"Example: Searching for Page module instances containing links."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Example: Searching for Page module instances containing links."',title:'"Example:',Searching:!0,for:!0,Page:!0,module:!0,instances:!0,containing:!0,'links."':!0},"if ($DB->sql_regex_supported()) {\n    $select = 'content ' . $DB->sql_regex() . ' :pattern';\n    $params = ['pattern'  => \"(src|data)\\ * = \\ *[\\\\\\\"\\']https?://\"]\n} else {\n    $select = $DB->sql_like('content', ':pattern', false);\n    $params = ['pattern'  => '% = %http%://%'];\n}\n\n$pages = $DB->get_records_select('page', $select, $params, 'course', 'id, course, name');\n")),(0,r.kt)("h3",{id:"sql_intersect"},"sql_intersect"),(0,r.kt)(i.U6,{version:"2.8",mdxType:"Since"}),(0,r.kt)("p",null,"Return the query fragment that allows to find intersection of two or more queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function sql_intersect(\n    $selects,\n    $fields\n);\n")),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("h3",{id:"set_debug"},"set_debug"),(0,r.kt)("p",null,"You can enable a debugging mode to make $DB output the SQL of every executed query, along with some timing information. This can be useful when debugging your code. Obviously, all such calls should be removed before code is submitted for integration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function set_debug(bool $state)\n")),(0,r.kt)("h2",{id:"special-cases"},"Special cases"),(0,r.kt)("h3",{id:"get_course"},"get_course"),(0,r.kt)("p",null,"From Moodle 2.5.1 onwards, you should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_course")," function instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"get_record('course', ...)")," if you want to get a course record based on its ID, especially if there is a significant possibility that the course being retrieved is either the current course for the page, or the site course. Those two course records have probably already been loaded, and using this function will save a database query."),(0,r.kt)("p",null,"Additionally, the code is shorter and easier to read."),(0,r.kt)("h3",{id:"get_courses"},"get_courses"),(0,r.kt)("p",null,"If you want to get all the current courses in your Moodle, use get_courses() without parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$courses = get_courses();\n")),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/general/development/policies/codingstyle/sql"},"SQL coding style")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/devdocs/docs/apis/core/"},"Core APIs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/devdocs/docs/apis/core/dml/exceptions"},"DML exceptions"),": New DML code is throwing exceptions instead of returning false if anything goes wrong"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/devdocs/docs/apis/core/dml/drivers"},"DML drivers"),": Database drivers for new DML layer"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/devdocs/docs/apis/core/dml/ddl"},"DDL functions"),": Where all the functions used to handle DB objects (",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Data_Definition_Language"},"DDL"),") are defined.")))}g.isMDXComponent=!0}}]);