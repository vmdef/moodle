(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[1704],{88698:function(e,t,a){"use strict";var n=a(75963);t.Z=void 0;var l=n(a(64938)),i=a(85893),o=(0,l.default)((0,i.jsx)("path",{d:"M5 13.18v4L12 21l7-3.82v-4L12 17l-7-3.82zM12 3 1 9l11 6 9-4.91V17h2V9L12 3z"}),"School");t.Z=o},72230:function(e,t,a){"use strict";a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var n=a(83117),l=a(80102),i=(a(67294),a(3905)),o=a(13904),s=a(50793),r=["components"],p={title:"Coding style",description:"The Moodle Coding Style guidelines",tags:["Policies","Coding guidelines","Developer processes"]},d=void 0,c={unversionedId:"development/policies/codingstyle/index",id:"development/policies/codingstyle/index",title:"Coding style",description:"The Moodle Coding Style guidelines",source:"@site/general/development/policies/codingstyle/index.md",sourceDirName:"development/policies/codingstyle",slug:"/development/policies/codingstyle/",permalink:"/devdocs/general/development/policies/codingstyle/",draft:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/general/development/policies/codingstyle/index.md",tags:[{label:"Policies",permalink:"/devdocs/general/tags/policies"},{label:"Coding guidelines",permalink:"/devdocs/general/tags/coding-guidelines"},{label:"Developer processes",permalink:"/devdocs/general/tags/developer-processes"}],version:"current",lastUpdatedBy:"Andrew Lyons",lastUpdatedAt:1655463803,formattedLastUpdatedAt:"17/06/2022",frontMatter:{title:"Coding style",description:"The Moodle Coding Style guidelines",tags:["Policies","Coding guidelines","Developer processes"]},sidebar:"coding",previous:{title:"Backporting",permalink:"/devdocs/general/development/policies/backporting"},next:{title:"SQL coding style",permalink:"/devdocs/general/development/policies/codingstyle/sql"}},m={},u=[{value:"Overview",id:"overview",level:2},{value:"Scope",id:"scope",level:3},{value:"Goals",id:"goals",level:3},{value:"Useful tools",id:"useful-tools",level:3},{value:"File Formatting",id:"file-formatting",level:2},{value:"PHP tags",id:"php-tags",level:3},{value:"Indentation",id:"indentation",level:3},{value:"Maximum Line Length",id:"maximum-line-length",level:3},{value:"Wrapping lines",id:"wrapping-lines",level:4},{value:"Wrapping control structures",id:"wrapping-control-structures",level:4},{value:"Wrapping if-statement conditions",id:"wrapping-if-statement-conditions",level:4},{value:"Wrapping class declarations",id:"wrapping-class-declarations",level:4},{value:"Wrapping of the function signatures",id:"wrapping-of-the-function-signatures",level:4},{value:"Wrapping parameters of a function call",id:"wrapping-parameters-of-a-function-call",level:4},{value:"Wrapping arrays",id:"wrapping-arrays",level:4},{value:"Wrapping arrays passed as function parameter",id:"wrapping-arrays-passed-as-function-parameter",level:4},{value:"Line Termination",id:"line-termination",level:3},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"Filenames",id:"filenames",level:3},{value:"Classes",id:"classes",level:3},{value:"Functions and Methods",id:"functions-and-methods",level:3},{value:"Function Parameters",id:"function-parameters",level:4},{value:"Variables",id:"variables",level:3},{value:"Constants",id:"constants",level:3},{value:"Booleans and the null value",id:"booleans-and-the-null-value",level:3},{value:"Namespaces",id:"namespaces",level:3},{value:"Further notes",id:"further-notes",level:4},{value:"Parts of a namespace",id:"parts-of-a-namespace",level:4},{value:"Rules for level1",id:"rules-for-level1",level:4},{value:"Rules for level2",id:"rules-for-level2",level:4},{value:"Rules for level3",id:"rules-for-level3",level:4},{value:"Namespaces within <code>**/tests</code> directories",id:"namespaces-within-tests-directories",level:4},{value:"Examples",id:"examples",level:4},{value:"Strings",id:"strings",level:2},{value:"Single quotes",id:"single-quotes",level:3},{value:"Double quotes",id:"double-quotes",level:3},{value:"Variable substitution",id:"variable-substitution",level:3},{value:"String concatenation",id:"string-concatenation",level:3},{value:"Language strings",id:"language-strings",level:3},{value:"Capitals",id:"capitals",level:4},{value:"Structure",id:"structure",level:4},{value:"Whitespace",id:"whitespace",level:4},{value:"Arrays",id:"arrays",level:2},{value:"Numerically indexed arrays",id:"numerically-indexed-arrays",level:3},{value:"Associative arrays",id:"associative-arrays",level:3},{value:"Classes",id:"classes-1",level:2},{value:"Class declarations",id:"class-declarations",level:3},{value:"Class member variables",id:"class-member-variables",level:3},{value:"Functions and methods",id:"functions-and-methods-1",level:2},{value:"Function and method declaration",id:"function-and-method-declaration",level:3},{value:"Function and method usage",id:"function-and-method-usage",level:3},{value:"Magic methods",id:"magic-methods",level:3},{value:"Control statements",id:"control-statements",level:2},{value:"If / else",id:"if--else",level:3},{value:"Switch",id:"switch",level:3},{value:"Foreach",id:"foreach",level:3},{value:"Ternary Operator",id:"ternary-operator",level:3},{value:"Require / include",id:"require--include",level:2},{value:"Documentation and comments",id:"documentation-and-comments",level:2},{value:"PHPDoc",id:"phpdoc",level:3},{value:"Types",id:"types",level:4},{value:"Tags",id:"tags",level:4},{value:"<code>@copyright</code>",id:"copyright",level:5},{value:"<code>@license</code>",id:"license",level:5},{value:"<code>@param</code>",id:"param",level:5},{value:"<code>@return</code>",id:"return",level:5},{value:"<code>@var</code>",id:"var",level:5},{value:"<code>@uses</code>",id:"uses",level:5},{value:"<code>@access</code>",id:"access",level:5},{value:"<code>@package</code>",id:"package",level:5},{value:"<code>@category</code>",id:"category",level:5},{value:"<code>@since</code>",id:"since",level:5},{value:"<code>@see</code>",id:"see",level:5},{value:"<code>@link</code>",id:"link",level:5},{value:"<code>@deprecated</code> (and <code>@todo</code>)",id:"deprecated-and-todo",level:5},{value:"<code>@throws</code>",id:"throws",level:5},{value:"Other specific tags",id:"other-specific-tags",level:5},{value:"Files",id:"files",level:3},{value:"Classes",id:"phpdoc-classes",level:3},{value:"Properties",id:"properties",level:3},{value:"Constants",id:"constants-1",level:3},{value:"Functions",id:"functions",level:3},{value:"Defines",id:"defines",level:3},{value:"Inline comments",id:"inline-comments",level:3},{value:"Using TODO",id:"using-todo",level:4},{value:"CVS keywords",id:"cvs-keywords",level:3},{value:"Exceptions",id:"exceptions",level:2},{value:"Exception classes",id:"exception-classes",level:3},{value:"Dangerous functions and constructs",id:"dangerous-functions-and-constructs",level:2},{value:"Policy about coding-style only fixes",id:"policy-about-coding-style-only-fixes",level:2},{value:"Git commits",id:"git-commits",level:2},{value:"Credits",id:"credits",level:2},{value:"See also",id:"see-also",level:2}],h={toc:u};function g(e){var t=e.components,a=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,(0,n.Z)({frontMatter:p},void 0!==c?{metadata:c}:{},{mdxType:"MoodlePageBanner"})),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("h3",{id:"scope"},"Scope"),(0,i.kt)("p",null,"This document describes ",(0,i.kt)("strong",{parentName:"p"},"style")," guidelines for developers working on or with Moodle code. It talks purely about the mechanics of code layout and the choices we have made for Moodle. The intent of this specification is to reduce cognitive friction when scanning code from different authors. It does so by enumerating a shared set of rules and expectations about how to format PHP code."),(0,i.kt)("p",null,"Unless otherwise specified, this Coding Style document ",(0,i.kt)("strong",{parentName:"p"},"will defer to ",(0,i.kt)("a",{parentName:"strong",href:"https://www.php-fig.org/psr/psr-12/"},"PSR-12"),", and ",(0,i.kt)("a",{parentName:"strong",href:"https://www.php-fig.org/psr/psr-1/"},"PSR-1"))," in that order."),(0,i.kt)("p",null,"Where a ",(0,i.kt)("strong",{parentName:"p"},"de-facto Moodle standard")," is encountered but is undocumented, an appropriate ",(0,i.kt)("strong",{parentName:"p"},"MDLSITE")," issue should be raised to have the standard either documented within this Coding style guide, or rejected and the PSR recommendations adopted instead."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},'A "de-facto Moodle standard" is any coding style which is commonly and typically used in Moodle.'))),(0,i.kt)("h3",{id:"goals"},"Goals"),(0,i.kt)("p",null,"Consistent coding style is important in any development project, and particularly when many developers are involved. A standard style helps to ensure that the code is easier to read and understand, which helps overall quality."),(0,i.kt)("p",null,"Abstract goals we strive for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"simplicity"),(0,i.kt)("li",{parentName:"ul"},"readability"),(0,i.kt)("li",{parentName:"ul"},"tool friendliness, such as use of method signatures, constants, and patterns that support IDE tools and autocompletion of method, class, and constant names.")),(0,i.kt)("p",null,"When considering the goals above, each situation requires an examination of the circumstances and balancing of various trade-offs."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Much of the existing Moodle code may not follow all of these guidelines - we continue to upgrade this code when we see it."))),(0,i.kt)("p",null,"For details about using the Moodle API to get things done, see the ",(0,i.kt)("a",{parentName:"p",href:"/general/development/policies"},"coding guidelines"),"."),(0,i.kt)("h3",{id:"useful-tools"},"Useful tools"),(0,i.kt)("p",null,"Several tools are available to help you in write code that conforms to this guide:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The Moodle ",(0,i.kt)("a",{parentName:"li",href:"https://moodle.org/plugins/view.php?plugin=local_codechecker"},"Code checker")," (integrates with ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/moodlehq/moodle-local_codechecker/blob/master/README.md#ide-integration"},"eclipse/phpstorm"),")"),(0,i.kt)("li",{parentName:"ul"},"The Moodle ",(0,i.kt)("a",{parentName:"li",href:"https://moodle.org/plugins/local_moodlecheck"},"PHPdoc checker"))),(0,i.kt)("p",null,"It is worth using both tools to check the code you are writing as they both perform slightly different checks.\nIf you can get your code to pass both then you are well on the way to making friends with those who will be reviewing your work."),(0,i.kt)("h2",{id:"file-formatting"},"File Formatting"),(0,i.kt)("h3",{id:"php-tags"},"PHP tags"),(0,i.kt)("p",null,'Always use "long" php tags. However, to avoid whitespace problems, DO NOT include the closing tag at the very end of the file.'),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)(s.dn,{language:"php",title:"Using long tags in a PHP file",mdxType:"CodeBlock"},"<?php\n\nrequire('config.php');\n")),(0,i.kt)("h3",{id:"indentation"},"Indentation"),(0,i.kt)("p",null,"Use an indent of ",(0,i.kt)("strong",{parentName:"p"},"4 spaces")," with no tab characters. Editors should be configured to treat tabs as spaces in order to prevent injection of new tab characters into the source code."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do not")," indent the main script level:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="An example of correct indentation at the main script level"',title:'"An',example:!0,of:!0,correct:!0,indentation:!0,at:!0,the:!0,main:!0,script:!0,'level"':!0},"<?php\nrequire('config.php');\n$a = required_param('a', PARAM_INT);\nif ($a > 10) {\n    call_some_error($a);\n} else {\n    do_something_with($a);\n}\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="An example of incorrect indentation at the main script level"',title:'"An',example:!0,of:!0,incorrect:!0,indentation:!0,at:!0,the:!0,main:!0,script:!0,'level"':!0},"<?php\n    require('config.php');\n    $a = required_param('a', PARAM_INT);\n    if ($a > 10) {\n        call_some_error($a);\n    } else {\n        do_something_with($a);\n    }\n"))),(0,i.kt)("p",null,"SQL queries use special indentation, see ",(0,i.kt)("a",{parentName:"p",href:"/general/development/policies/codingstyle/sql"},"SQL coding style"),"."),(0,i.kt)("h3",{id:"maximum-line-length"},"Maximum Line Length"),(0,i.kt)("p",null,"The key issue is readability."),(0,i.kt)("p",null,"Aim for 132 characters if it is convenient, it is not recommended to use more than 180 characters."),(0,i.kt)("p",null,"The exception are string files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/lang")," directory where lines ",(0,i.kt)("inlineCode",{parentName:"p"},"$string['id'] = 'value';")," should have the value defined as a single string of any length, wrapped by quotes (no concatenation operators, no heredoc and no newdoc syntax). This helps to parse and process these string files without including them as a PHP code."),(0,i.kt)("h4",{id:"wrapping-lines"},"Wrapping lines"),(0,i.kt)("p",null,"Whenever wrapping lines, following rules should generally apply:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Indent with 4 spaces by default."),(0,i.kt)("li",{parentName:"ul"},"Indent the wrapped line with control statement conditions or a function/class declaration with 4 additional spaces to visually distinguish it from the following body of the control statement or the function/class.")),(0,i.kt)("p",null,"See examples in the following sections."),(0,i.kt)("h4",{id:"wrapping-control-structures"},"Wrapping control structures"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"while ($fileinfolevel && $params['component'] === 'user'\n        && $params['filearea'] === 'private') {\n    $fileinfolevel = $fileinfolevel->get_parent();\n    $params = $fileinfolevel->get_params();\n}\n"))),(0,i.kt)("h4",{id:"wrapping-if-statement-conditions"},"Wrapping if-statement conditions"),(0,i.kt)("p",null,"There is nothing special and the control structures rule would still apply."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"if (($userenrol->timestart && $userenrol->timestart < $limit) ||\n        (!$userenrol->timestart && $userenrol->timecreated < $limit)) {\n    return false;\n}\n"))),(0,i.kt)("p",null,"However, if you have a few conditions in one control structure, try setting some helper variables for evaluating the conditions to improve the readability."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$iscourseorcategoryitem = ($element['object']->is_course_item() || $element['object']->is_category_item());\n$usesscaleorvalue = in_array($element['object']->gradetype, [GRADE_TYPE_SCALE, GRADE_TYPE_VALUE]);\n\nif ($iscourseorcategoryitem && $usesscaleorvalue) {\n    // This makes the conditions easier to review and understand.\n}\n"))),(0,i.kt)("p",null,"Compare it with the following."),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// DO NOT DO THIS.\nif (($element['object']->is_course_item() || $element['object']->is_category_item())\n        && ($element['object']->gradetype == GRADE_TYPE_SCALE\n        || $element['object']->gradetype == GRADE_TYPE_VALUE)) {\n    // Too long lines with complex conditions are discouraged even when they are indented properly.\n}\n"))),(0,i.kt)("h4",{id:"wrapping-class-declarations"},"Wrapping class declarations"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class foo implements bar, baz, qux, quux, quuz, corge, grault,\n        garply, waldo, fred, plugh, xyzzy, thud {\n\n    // Class body indented with 4 spaces.\n}\n"))),(0,i.kt)("p",null,"Alternatively you may want to provide each implemented interface on its own line if it helps readability:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class provider implements\n        // These lines are indented with 8 spaces to distinguish them visually from the class body.\n        \\core_privacy\\local\\metadata\\provider,\n        \\core_privacy\\local\\request\\subsystem\\provider,\n        \\core_privacy\\local\\request\\core_userlist_provider {\n\n    // Class body indented with 4 spaces.\n}\n"))),(0,i.kt)("h4",{id:"wrapping-of-the-function-signatures"},"Wrapping of the function signatures"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",8:!0,className:"language-php",metastring:'title="Wrapping function signatures with 8 spaces"',title:'"Wrapping',function:!0,signatures:!0,with:!0,'spaces"':!0},"/**\n * ...\n */\nprotected function component_class_callback_failed(\\Throwable $e, string $component, string $interface,\n        string $methodname, array $params) {\n    global $CFG, $DB;\n\n    if ($this->observer) {\n        // ...\n    }\n}\n"))),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Wrapping function signatures following PSR-12"',title:'"Wrapping',function:!0,signatures:!0,following:!0,'PSR-12"':!0},"/**\n * ...\n */\nprotected function component_class_callback_failed(\n    \\Throwable $e,\n    string $component,\n    string $interface,\n    string $methodname,\n    array $params\n) {\n    global $CFG, $DB;\n\n    if ($this->observer) {\n        // ...\n    }\n}\n"))),(0,i.kt)("h4",{id:"wrapping-parameters-of-a-function-call"},"Wrapping parameters of a function call"),(0,i.kt)("p",null,"Normally, parameters will just fit on one line. If they eventually become too long to fit a single line or of it helps readability, indent with 4 spaces."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Wrapping function calls the Moodle way"',title:'"Wrapping',function:!0,calls:!0,the:!0,Moodle:!0,'way"':!0},"do_something($param1, $param2, null, null,\n    $param5, null, true);\n"))),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Wrapping function calls following PSR-12"',title:'"Wrapping',function:!0,calls:!0,following:!0,'PSR-12"':!0},"do_something(\n    $param1,\n    $param2,\n    null,\n    null,\n    $param5,\n    null,\n    true\n);\n"))),(0,i.kt)("h4",{id:"wrapping-arrays"},"Wrapping arrays"),(0,i.kt)("p",null,"There is nothing special and the general rules apply again. Indent the wrapped line with 4 spaces."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$plugininfo['preferences'][$plugin] = ['id' => $plugin, 'link' => $pref_url,\n    'string' => $modulenamestr];\n"))),(0,i.kt)("p",null,"In many cases, the following style with each item on its own line will make the code more readable."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$plugininfo['preferences'][$plugin] = [\n    'id' => $plugin,\n    'link' => $pref_url,\n    'string' => $modulenamestr,\n];\n"))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The last item has a trailing comma left there which allows to extend the list of items later with a cleaner diff.\nFor the same reason, it is better not to align the assignment operators."))),(0,i.kt)("h4",{id:"wrapping-arrays-passed-as-function-parameter"},"Wrapping arrays passed as function parameter"),(0,i.kt)("p",null,"This is just an example of combining some of the examples above."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$url = new moodle_url('/course/loginas.php', [\n    'id' => $course->id,\n    'sesskey' => sesskey(),\n]);\n"))),(0,i.kt)("h3",{id:"line-termination"},"Line Termination"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Every line must be terminated by a Unix line feed character (LF, decimal 10, hexadecimal 0x0A)."),(0,i.kt)("li",{parentName:"ul"},"Carriage returns (CR, decimal 13, hexadecimal 0x0D) must NOT be used alone or with LFs."),(0,i.kt)("li",{parentName:"ul"},"There must be no whitespace characters (spaces or tabs) at the end of any line."),(0,i.kt)("li",{parentName:"ul"},"There must be no extra blank lines at the end of a file; every file should end with a single LF character.")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This is consistent with the conventions of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-12-extended-coding-style-guide.md#22-files"},"PSR-12"),"."))),(0,i.kt)("h2",{id:"naming-conventions"},"Naming Conventions"),(0,i.kt)("h3",{id:"filenames"},"Filenames"),(0,i.kt)("p",null,"Filenames should:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"be whole english words"),(0,i.kt)("li",{parentName:"ul"},"be as short as possible"),(0,i.kt)("li",{parentName:"ul"},"use lowercase letters only"),(0,i.kt)("li",{parentName:"ul"},"end in ",(0,i.kt)("inlineCode",{parentName:"li"},".php"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".html"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".js"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".css")," or ",(0,i.kt)("inlineCode",{parentName:"li"},".xml"))),(0,i.kt)("h3",{id:"classes"},"Classes"),(0,i.kt)("p",null,"Class names should always be lower-case English words, separated by underscores:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class some_custom_class {\n    function class_method() {\n        echo 'foo';\n    }\n}\n"))),(0,i.kt)("p",null,"Always use ",(0,i.kt)("inlineCode",{parentName:"p"},"()")," when creating new instances even if constructor does not need any parameters."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php true",metastring:'title="Example of class instantiation"',title:'"Example',of:!0,'instantiation"':!0},"$instance = new some_custom_class();\n"))),(0,i.kt)("p",null,"When you want a plain object of no particular class, for example when you are preparing some data to insert into the database with $DB->insert_record, you should use the PHP standard class ",(0,i.kt)("inlineCode",{parentName:"p"},"stdClass"),". For example:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$row = new stdClass();\n$row->id = $id;\n$row->field = 'something';\n$DB->insert_record('table', $row);\n"))),(0,i.kt)("p",null,"Alternatively you can cast an array to an object:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Creating a stdClass from an object"',title:'"Creating',a:!0,stdClass:!0,from:!0,an:!0,'object"':!0},"$row = (object) [\n    'id' => $id,\n    'field' => 'something',\n];\n$DB->insert_record('table', $row);\n"))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Before Moodle 2.0, Moodle defined a class named ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," extending ",(0,i.kt)("inlineCode",{parentName:"p"},"stdClass"),", and recommended instantiation using ",(0,i.kt)("inlineCode",{parentName:"p"},"new object();"),".\nThis has now been deprecated. Please use ",(0,i.kt)("inlineCode",{parentName:"p"},"stdClass")," or the array instantiation instead."))),(0,i.kt)("h3",{id:"functions-and-methods"},"Functions and Methods"),(0,i.kt)("p",null,"Function names should be simple English lowercase words, and start with the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/Frankenstyle"},"Frankenstyle")," prefix and plugin name to avoid conflicts between plugins. Words should be separated by underscores."),(0,i.kt)("p",null,"Verbosity is encouraged: function names should be as illustrative as is practical to enhance understanding."),(0,i.kt)("p",null,"The uses of type hints and return type declarations is required in PHP in all possible locations for all new code. There will be necessary exclusions, such as code extending existing non-compliant code and implementing things where it is not available. Progressive approach will be applied."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"There is no space between the function name and the following (brackets). There is also no whitespace between the nullable character (question mark - ?) and params or return types or between the function closing brackets and the colon."))),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"function report_participation_get_overviews(string $action, ?int userid): ?array {\n    // Actual function code goes here.\n}\n"))),(0,i.kt)("p",null,"There is an exception for ",(0,i.kt)("a",{parentName:"p",href:"/docs/apis/plugintypes/mod"},"activity modules")," modules|activity modules]] that still use only plugin name as the prefix for legacy reasons."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"function forum_set_display_mode($mode = 0) {\n    global $USER, $CFG;\n\n    // Actual function code goes here.\n}\n"))),(0,i.kt)("h4",{id:"function-parameters"},"Function Parameters"),(0,i.kt)("p",null,"Parameters are always simple lowercase English words (sometimes more than one, like ",(0,i.kt)("inlineCode",{parentName:"p"},"$initialvalue"),"), and should always have sensible defaults if possible."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," as the default value instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," for situations like this where a default value isn't needed."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"public function foo($required, $optional = null);\n"))),(0,i.kt)("p",null,"However, if an optional parameter is boolean, and its logical default value should be true, or false, then using true or false is acceptable."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Type hinting with optional parameters")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When type-hinting optional parameters, technically the nullable hint is optional, but it is highly recommended as it leads to consistent code."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Get the name, using a default if not available.\n *\n * @param null|string $default The value to get if not found\n */\npublic function get(?string $default = null): string;\n")))),(0,i.kt)("h3",{id:"variables"},"Variables"),(0,i.kt)("p",null,"Variable names should always be easy-to-read, meaningful lower-case English words. If you really need more than one word then run them together, but keep them as short as possible. Use ",(0,i.kt)("strong",{parentName:"p"},"plural")," names for arrays of objects. Use ",(0,i.kt)("strong",{parentName:"p"},"positive")," variables names always (allow, enable not prevent, disable)."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$quiz = null;\n$errorstring = null;\n$assignments = null; // For an array of objects.\n$i = null; // Only in little loops.\n$allowfilelocking = false;\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$Quiz = null; // Variables should be all lower case.\n$camelCase = null; // Variables should not be in camelCase, PascalCake.\n$aReallyLongVariableNameWithoutAGoodReason = null; // Variable names should be sensible and short.\n$error_string = null; // Variable names should not contain underscores.\n$preventfilelocking = true; // Variable names should not be negative.\n"))),(0,i.kt)("p",null,"Core global variables in Moodle are identified using uppercase variables (that is ",(0,i.kt)("inlineCode",{parentName:"p"},"$CFG"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$SESSION"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$USER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$COURSE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$SITE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$PAGE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$DB"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"$THEME"),"). Don't create any more!"),(0,i.kt)("h3",{id:"constants"},"Constants"),(0,i.kt)("p",null,"Constants should always be in upper case, and always start with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/Frankenstyle"},"Frankenstyle")," prefix and plugin name (in case of activities the module name only for legacy reasons). They should have words separated by underscores."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"define('BLOCK_COURSE_OVERVIEW_SHOWCATEGORIES_NONE', '0');\ndefine('FORUM_MODE_FLATOLDEST', 1);\n"))),(0,i.kt)("h3",{id:"booleans-and-the-null-value"},"Booleans and the null value"),(0,i.kt)("p",null,"Use lower case for ",(0,i.kt)("strong",{parentName:"p"},"true"),", ",(0,i.kt)("strong",{parentName:"p"},"false")," and ",(0,i.kt)("strong",{parentName:"p"},"null"),"."),(0,i.kt)("h3",{id:"namespaces"},"Namespaces"),(0,i.kt)("p",null,"Formal namespaces are required for any new classes in Moodle. The following exceptions apply:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"There is no requirement to move existing non-namespaced classes to a namespace; and"),(0,i.kt)("li",{parentName:"ol"},"Where an existing mechanism exists for loading a class, and that mechanism does not support the use of a namespaced class, the existing ",(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/Frankenstyle"},"Frankenstyle")," prefix on the class name will be allowed.")),(0,i.kt)("p",null,"The use of a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/Frankenstyle#Class_names"},"Frankenstyle prefix on class names")," is deprecated and should only be used in the above exceptions."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Correct use of namespaces"',title:'"Correct',use:!0,of:!0,'namespaces"':!0},"// A namespace for the `mod_forum` plugin.\n\nnamespace mod_forum;\nclass example {\n}\n\n// A namespace for the `external` subsystem usage in the `mod_forum` plugin.\nnamespace mod_forum\\external;\nclass example {\n}\n\n// A namespace for the `core_user` core subsystem.\nnamespace core_user;\nclass example {}\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Incorrect use of namespaces"',title:'"Incorrect',use:!0,of:!0,'namespaces"':!0},"// Namespaced classes are no longer allowed for new code, except where it is unavoidable.\nclass mod_forum_example {\n}\n\nclass mod_forum_external_example {\n}\n\nclass core_user_example {\n}\n"))),(0,i.kt)("p",null,"The use of namespaces must conform to the following rules:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Classes belonging to a namespace must be created in a classes directory, for example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in the ",(0,i.kt)("inlineCode",{parentName:"li"},"mod_forum")," plugin classes should be placed in ",(0,i.kt)("inlineCode",{parentName:"li"},"mod/forum/classes"),";"),(0,i.kt)("li",{parentName:"ul"},"for core code, classes should be placed in ",(0,i.kt)("inlineCode",{parentName:"li"},"lib/classes"),"; or"),(0,i.kt)("li",{parentName:"ul"},"for a core subsystem, classes should be placed in ",(0,i.kt)("inlineCode",{parentName:"li"},"subsystemdir/classes"),".")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The classname and filename for all namespaced classes must conform to the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/Automatic_class_loading"},"automatic class loading")," rules. The use of formal PHP namespaces is ",(0,i.kt)("strong",{parentName:"li"},"required")," in all new code."),(0,i.kt)("li",{parentName:"ol"},"Use at most one namespace declaration per file.")),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="mod/porridge/classes/local/equipment/spoon.php"',title:'"mod/porridge/classes/local/equipment/spoon.php"'},"<?php\n\nnamespace mod_porridge\\local\\equipment;\n\nclass spoon {\n    // Your code here.\n}\n"))),(0,i.kt)("p",null,"BAD:"),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="mod/porridge/classes/local/equipment/spoon.php"',title:'"mod/porridge/classes/local/equipment/spoon.php"'},"<?php\nnamespace mod_porridge\\local\\equipment;\n\nclass spoon {\n    // Your code here.\n}\n\nnamespace mod_porridge\\local\\procedures; // We are changing the namespace here, do not do it.\n\nclass eat {\n    // Another code here.\n}\n\n// End of file.\n"))),(0,i.kt)("h4",{id:"further-notes"},"Further notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The namespace declaration ",(0,i.kt)("em",{parentName:"li"},"may")," be preceded with a doc block."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"#classes"},"class naming")," rules also apply to the names for each level of namespace."),(0,i.kt)("li",{parentName:"ul"},"The namespace declaration must be the first non-comment line in the file, followed by one blank line, followed by any (optional)\n",(0,i.kt)("inlineCode",{parentName:"li"},"use")," statements"),(0,i.kt)("li",{parentName:"ul"},"Each ",(0,i.kt)("inlineCode",{parentName:"li"},"use")," statement must be on its own line."),(0,i.kt)("li",{parentName:"ul"},"There should be a single empty line following the final ",(0,i.kt)("inlineCode",{parentName:"li"},"use")," statement."),(0,i.kt)("li",{parentName:"ul"},"The use of ",(0,i.kt)("inlineCode",{parentName:"li"},"use")," statements should be made to avoid repetition of long namespaces in the code."),(0,i.kt)("li",{parentName:"ul"},"Do not import an entire namespace with a ",(0,i.kt)("inlineCode",{parentName:"li"},"use")," statement, import individual classes only."),(0,i.kt)("li",{parentName:"ul"},"Do not alias class imports (",(0,i.kt)("inlineCode",{parentName:"li"},"use XXX as YYY;"),") unless it is absolutely required to resolve a conflict."),(0,i.kt)("li",{parentName:"ul"},"It is recommended that class aliases be alphabetically sorted.")),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php true",metastring:'title="An example of correct class importing"',title:'"An',example:!0,of:!0,correct:!0,'importing"':!0},"<?php\nuse mod_porridge\\local\\equipment\\bowl; // One class per line.\nuse mod_porridge\\local\\equipment\\spoon; // One class per line.\n\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php true",metastring:'title="Examples of incorrect class importing"',title:'"Examples',of:!0,incorrect:!0,'importing"':!0},"<?php\n\nuse mod_porridge\\local\\equipment\\spoon, mod_porridge\\local\\equipment\\bowl; // Multiple classes per line.\nuse mod_porridge\\local; // Importing an entire namespace.\nuse core; // Importing an entire namespace.\nuse mod_breakfast; // Importing an entire namespace.\nuse mod_porridge\\local\\equipment\\spoon as silverspoon; // Named import with no good reason.\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Never use the ",(0,i.kt)("inlineCode",{parentName:"li"},"__NAMESPACE__")," magic constant."),(0,i.kt)("li",{parentName:"ul"},"Never use the ",(0,i.kt)("inlineCode",{parentName:"li"},"namespace")," keyword anywhere but the namespace declaration.")),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Inocrrect: An example of the namespace keyword used incorrectly"',title:'"Inocrrect:',An:!0,example:!0,of:!0,the:!0,namespace:!0,keyword:!0,used:!0,'incorrectly"':!0},"$obj = new namespace\\Another();\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Do not use bracketed "namespace" blocks.')),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Incorrect: An example of a bracketed namespace"',title:'"Incorrect:',An:!0,example:!0,of:!0,a:!0,bracketed:!0,'namespace"':!0},"namespace {\n    // Global scope.\n}\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Namespaces ",(0,i.kt)("em",{parentName:"li"},"MUST")," only be used for classes existing in a subfolder of ",(0,i.kt)("inlineCode",{parentName:"li"},"classes"),"."),(0,i.kt)("li",{parentName:"ul"},"For new classes - the maximum level of detail should be used when deciding the namespace.")),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Correct: Use the maximum level of detail in the namespace"',title:'"Correct:',Use:!0,the:!0,maximum:!0,level:!0,of:!0,detail:!0,in:!0,'namespace"':!0},"namespace xxxx\\yyyy; // xxxx is the component, yyyy is the api.\n\nclass zzzz {\n}\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Never use a leading backslash (",")",' in "namespace" and "use" statements.'),(0,i.kt)("li",{parentName:"ul"},"Global functions called from namespaced code should never use a leading\nbackslash (",(0,i.kt)("inlineCode",{parentName:"li"},"\\"),").\nClasses from outside the current scope use the leading backslash or are\nimported by the ",(0,i.kt)("inlineCode",{parentName:"li"},"use")," keyword. See\n",(0,i.kt)("a",{parentName:"li",href:"https://www.php.net/manual/en/language.namespaces.fallback.php"},"PHP manual")," for\ndetails.")),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Correct: Examples of correct usages"',title:'"Correct:',Examples:!0,of:!0,correct:!0,'usages"':!0},"<?php\nnamespace mod_breakfast\\local;\n\nuse moodle_url;\n\necho get_string('goodmorning', 'mod_breakfast'); // No leading backslash for global functions.\n$url = new moodle_url(...); // Leading backslash not needed here because we imported it into our namespace via \"use\".\n$tasks = \\core\\task\\manager::get_all_scheduled_tasks(); // Leading slash needed here.\n$a = new \\stdClass(); // Leading slash needed here.\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Incorrect; Examples of incorrect usages"',title:'"Incorrect;',Examples:!0,of:!0,incorrect:!0,'usages"':!0},"<?php\nnamespace \\mod_breakfast; // The leading backslash should not be here.\n\nuse \\core\\task\\manager; // The leading backslash should not be here.\n\n\\get_string('xxxx', 'yyyy'); // The leading backslash should not be here.\n"))),(0,i.kt)("h4",{id:"parts-of-a-namespace"},"Parts of a namespace"),(0,i.kt)("p",null,"Given the following fully qualified name of a class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:'language-title="Anatomy',metastring:'of a namespace"',of:!0,a:!0,'namespace"':!0},"\\<level1>\\<level2>\\<level3>\\...\\<classname>\n")),(0,i.kt)("p",null,"There are clear rules for what is allowable at each level of namespace.\nOnly the first level is mandatory.\nNested namespaces are used when the class implements some core API or when the plugin maintainer want to organise classes to separate namespaces within the plugin - see rules regarding the level2 for details."),(0,i.kt)("h4",{id:"rules-for-level1"},"Rules for level1"),(0,i.kt)("p",null,"The first level, when used, ",(0,i.kt)("strong",{parentName:"p"},"MUST")," be ",(0,i.kt)("em",{parentName:"p"},"either"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a full component name (for example ",(0,i.kt)("inlineCode",{parentName:"li"},"\\mod_forum"),"). All classes using namespaces in a plugin ",(0,i.kt)("em",{parentName:"li"},"MUST")," be contained in this level 1 namespace; or"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\core")," for all core apis")),(0,i.kt)("h4",{id:"rules-for-level2"},"Rules for level2"),(0,i.kt)("p",null,"The second level, when used, ",(0,i.kt)("strong",{parentName:"p"},"MUST")," be ",(0,i.kt)("em",{parentName:"p"},"either"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The short name of a ",(0,i.kt)("a",{parentName:"li",href:"/docs/apis"},"core API"),".\nThe classes in this namespace must either implement or use the API in some way; or"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\local")," for any other classes in a component, if the maintainer wants to organise them further (note that for most components, it's probably enough to have all their own classes in the root level1 namespace only).")),(0,i.kt)("h4",{id:"rules-for-level3"},"Rules for level3"),(0,i.kt)("p",null,"There are no rules limiting what can be used as a level 3 namespace.\nThis is where a plugin or addon can make extensive use of namespaces with no\nchance of conflict with any other plugin or api, now and forever onwards."),(0,i.kt)("h4",{id:"namespaces-within-tests-directories"},"Namespaces within ",(0,i.kt)("inlineCode",{parentName:"h4"},"**/tests")," directories"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"These rules were agreed in ",(0,i.kt)("a",{parentName:"p",href:"https://tracker.moodle.org/browse/MDLSITE-4800"},"MDLSITE-4800")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The use of namespaces is strongly recommended for unit tests."),(0,i.kt)("li",{parentName:"ul"},"When using namespaces, the namespace of the test class should match the namespace of the code under test."),(0,i.kt)("li",{parentName:"ul"},"Test classes should be named after the class under test, and suffixed with ",(0,i.kt)("inlineCode",{parentName:"li"},"_test.php"),"."),(0,i.kt)("li",{parentName:"ul"},"The 1st level namespace of the test class ",(0,i.kt)("strong",{parentName:"li"},"must")," match the component it belongs to."),(0,i.kt)("li",{parentName:"ul"},"Sub-namespaces are allowed, strictly following the general namespace rules for levels 2 & 3 above. Always trying to match as much as possible the namespace of the code being covered."),(0,i.kt)("li",{parentName:"ul"},"Sub-directory structure must match the namespace structure, but will be placed in the ",(0,i.kt)("inlineCode",{parentName:"li"},"tests")," directory instead.")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Autoloading of tests is not supported (but autoloading the standard class from a test is)."))),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Correct: Examples of correct namespaces"',title:'"Correct:',Examples:!0,of:!0,correct:!0,'namespaces"':!0},"// Plugin's own namespace when not using nested namespaces (typical)\n// Namespace location: mod/breakfast/classes/\n// Test location: mod/breakfast/tests/\nnamespace mod_breakfast;\n\n// Plugin's own namespace when using nested namespaces\n// Namespace location: mod/breakfast/classes/local/\n// Test location: mod/breakfast/tests/local/\nnamespace mod_breakfast\\local;\n\n// Plugin's own namespace when using nested namespaces with further organisation\n// Namespace location: mod/breakfast/classes/local/utils/\n// Test location: mod/breakfast/tests/local/utils/\nnamespace mod_breakfast\\local\\utils;\n\n// Plugin's namespace to implement core API\n// Namespace location: mod/breakfast/classes/event/\n// Test location: mod/breakfast/tests/event/\nnamespace mod_breakfast\\event;\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'namespace mymodule;                     // Violates the level1 rules - invalid component name\nnamespace mod_breakfast\\myutilities;    // Violates the level2 rules - invalid core API name\nnamespace mod_forum\\test;               // While technically correct ("test" is a valid API) - it\'s not ok\n                                        // because the namespace in tests should match the namespace of the code\n                                        // being covered, and normally components don\'t have any "test"\n                                        // level-2 to be covered. Only then it could be used.\n'))),(0,i.kt)("h2",{id:"strings"},"Strings"),(0,i.kt)("p",null,"Since string performance is not an issue in current versions of PHP, the main criteria for strings is readability."),(0,i.kt)("h3",{id:"single-quotes"},"Single quotes"),(0,i.kt)("p",null,"Always use single quotes when a string is literal, or contains a lot of double quotes (like HTML):"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$a = 'Example string';\necho '<span class=\"'.s($class).'\"></span>';\n$html = '<a href=\"http://something\" title=\"something\">Link</a>';\n"))),(0,i.kt)("h3",{id:"double-quotes"},"Double quotes"),(0,i.kt)("p",null,"These are a lot less useful in Moodle. Use double quotes when you need to include plain variables or a lot of single quotes."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'echo "<span>$string</span>";\n$statement = "You aren\'t serious!";\n'))),(0,i.kt)("p",null,"Complex SQL queries should be always enclosed in double quotes."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$sql = \"SELECT e.*, ue.userid\n          FROM {user_enrolments} ue\n          JOIN {enrol} e ON (e.id = ue.enrolid AND e.enrol = 'self' AND e.customint2 > 0)\n          JOIN {user} u ON u.id = ue.userid\n         WHERE :now - u.lastaccess > e.customint2\";\n"))),(0,i.kt)("h3",{id:"variable-substitution"},"Variable substitution"),(0,i.kt)("p",null,"Variable substitution can use either of these forms:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'$greeting = "Hello $name, welcome back!";\n\n$greeting = "Hello {$name}, welcome back!";\n'))),(0,i.kt)("h3",{id:"string-concatenation"},"String concatenation"),(0,i.kt)("p",null,'Strings must be concatenated using the "." operator.'),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$longstring = $several . $short . 'strings';\n"))),(0,i.kt)("p",null,'If the lines are long, break the statement into multiple lines to improve readability. In these cases, put the "dot" at the end of each line.'),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$string = 'This is a very long and stupid string because ' . $editorname .\n    \" couldn't think of a better example at the time.\";\n"))),(0,i.kt)("p",null,"The dot operator may be used without any space to either side (as shown in the above examples), or with spaces on each side; whichever the developer prefers."),(0,i.kt)("h3",{id:"language-strings"},"Language strings"),(0,i.kt)("h4",{id:"capitals"},"Capitals"),(0,i.kt)("p",null,"Capitals should only be used when:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"starting a sentence, or"),(0,i.kt)("li",{parentName:"ol"},"starting a proper name, like Moodle.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Correct.\nAlways look like this example.\n\n// Incorrect.\nNever Like This Example.\n")),(0,i.kt)("h4",{id:"structure"},"Structure"),(0,i.kt)("p",null,"Strings should not be designed for UI concatenation, as it may cause problems in other languages. Each string should stand alone."),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Strings should not be designed to be concatenated to make a sentence"',title:'"Strings',should:!0,not:!0,be:!0,designed:!0,to:!0,concatenated:!0,make:!0,a:!0,'sentence"':!0},"// Incorrect.\n$string['overduehandling'] = 'When time expires';\n$string['overduehandlingautosubmit'] = 'the attempt is submitted automatically';\n$string['overduehandlinggraceperiod'] = 'there is a grace period in which to submit the attempt, but not answer more questions';\n$string['overduehandlingautoabandon'] = 'that is it. The attempt must be submitted before time expires, or it is not counted';\n"))),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Strings should be complete without concatenation"',title:'"Strings',should:!0,be:!0,complete:!0,without:!0,'concatenation"':!0},"// Correct.\n$string['overduehandling'] = 'Time expiry behaviour';\n$string['overduehandlingautosubmit'] = 'Unfinished attempts will be autosubmitted immediately';\n$string['overduehandlinggraceperiod'] = 'Unfinished attempts have a short grace period to be submitted for grading';\n$string['overduehandlingautoabandon'] = 'Unfinished attempts are immediately discarded';\n"))),(0,i.kt)("h4",{id:"whitespace"},"Whitespace"),(0,i.kt)("p",null,"Language strings should not contain or even rely on any leading or trailing whitespace. Such strings are not easy to be translated in the translation tool, AMOS."),(0,i.kt)("h2",{id:"arrays"},"Arrays"),(0,i.kt)("h3",{id:"numerically-indexed-arrays"},"Numerically indexed arrays"),(0,i.kt)("p",null,"When declaring arrays, a trailing space must be added after each comma delimiter to improve readability:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$myarray = [1, 2, 3, 'Stuff', 'Here'];\n"))),(0,i.kt)("p",null,"Multi-line indexed arrays are fine, but pad each successive lines as above with an 4-space indent:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$myarray = [1, 2, 3, 'Stuff', 'Here',\n    $a, $b, $c, 56.44, $d, 500];\n"))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The example above also can be written as follows:",(0,i.kt)("br",null),"\n(with special attention to the last line having a trailing comma to extend the list of items later with a cleaner diff)"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$myarray = [\n    1, 2, 3, 'Stuff', 'Here',\n    $a, $b, $c, 56.44, $d, 500,\n];\n"))))),(0,i.kt)("p",null,"In any case, brackets and newlines need to be balanced, irrespectively of the number of elements per line."),(0,i.kt)("h3",{id:"associative-arrays"},"Associative arrays"),(0,i.kt)("p",null,"Use multiple lines if this helps readability. For example:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$myarray = [\n    'firstkey' => 'firstvalue',\n    'secondkey' => 'secondvalue',\n];\n"))),(0,i.kt)("h2",{id:"classes-1"},"Classes"),(0,i.kt)("h3",{id:"class-declarations"},"Class declarations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Classes must be named according to Moodle's naming conventions."),(0,i.kt)("li",{parentName:"ul"},'Classes must go under their respective "component/classes" dir to get the benefits of autoloading and ',(0,i.kt)("a",{parentName:"li",href:"#namespaces"},"namespacing"),". There aren't such luxuries out from there."),(0,i.kt)("li",{parentName:"ul"},"Each php file will contain only one class (or interface, or trait, etc.). Unless it's part of old APIs where multi-artifact files were allowed."),(0,i.kt)("li",{parentName:"ul"},"The brace should always be written on the line beside the class name."),(0,i.kt)("li",{parentName:"ul"},"Every class must have a documentation block that conforms to the PHPDocumentor standard."),(0,i.kt)("li",{parentName:"ul"},"All code in a class must be indented with 4 spaces."),(0,i.kt)("li",{parentName:"ul"},'Placing additional code (side-effects) in class files is only permitted to require artifacts not provided via autoloading (old classes or libs out from the "classes" directories and not loaded by Moodle\'s bootstrap). In those cases, the use of the ',(0,i.kt)("a",{parentName:"li",href:"#require--include"},(0,i.kt)("inlineCode",{parentName:"a"},"MOODLE_INTERNAL")," check")," will be required.")),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Short description for class.\n *\n * Long description for class (if any)...\n *\n * @package    mod_mymodule\n * @copyright  2008 Kim Bloggs\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass sample_class {\n    // All contents of class\n    // must be indented 4 spaces.\n}\n"))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The classes PHPDoc style is defined with more detail in the ",(0,i.kt)("a",{parentName:"p",href:"#phpdoc-classes"},"Documentation and comments / Classes")," section in this document."))),(0,i.kt)("h3",{id:"class-member-variables"},"Class member variables"),(0,i.kt)("p",null,"Member variables must be named according to Moodle's variable naming conventions."),(0,i.kt)("p",null,"Any variables declared in a class must be listed at the top of the class, above the declaration of any methods."),(0,i.kt)("p",null,"The var construct is not permitted. Member variables always declare their visibility by using one of the ",(0,i.kt)("strong",{parentName:"p"},"private"),", ",(0,i.kt)("strong",{parentName:"p"},"protected"),", or ",(0,i.kt)("strong",{parentName:"p"},"public")," modifiers. Giving access to member variables directly by declaring them as public is permitted but discouraged in favor of accessor methods (set/get)."),(0,i.kt)("h2",{id:"functions-and-methods-1"},"Functions and methods"),(0,i.kt)("h3",{id:"function-and-method-declaration"},"Function and method declaration"),(0,i.kt)("p",null,"Functions must be named according to the Moodle function naming conventions."),(0,i.kt)("p",null,"Methods inside classes must always declare their visibility by using one of the private, protected, or public modifiers."),(0,i.kt)("p",null,"As with classes, the brace should always be written on same line as the function name."),(0,i.kt)("p",null,"Don't leave spaces between the function name and the opening parenthesis for the arguments."),(0,i.kt)("p",null,"The return value must not be enclosed in parentheses. This can hinder readability, in additional to breaking code if a method is later changed to return by reference."),(0,i.kt)("p",null,"Return should only be one data type. It is discouraged to have multiple return types"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Documentation Block Here\n */\nclass sample_class {\n\n    /**\n     * Documentation Block Here\n     */\n    public function sample_function() {\n        // All contents of function\n        // must be indented four spaces.\n        return true;\n    }\n}\n"))),(0,i.kt)("h3",{id:"function-and-method-usage"},"Function and method usage"),(0,i.kt)("p",null,"Function arguments should be separated by a single trailing space after the comma delimiter."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"three_arguments(1, 2, 3);\n"))),(0,i.kt)("h3",{id:"magic-methods"},"Magic methods"),(0,i.kt)("p",null,"Magic methods are heavily discouraged, justification will be required when used. Note: laziness will not be a valid argument."),(0,i.kt)("p",null,"(See ",(0,i.kt)("a",{parentName:"p",href:"https://tracker.moodle.org/browse/MDL-52634"},"MDL-52634")," for discussion of rationale)"),(0,i.kt)("h2",{id:"control-statements"},"Control statements"),(0,i.kt)("p",null,"In general, use white space liberally between lines to add clarity."),(0,i.kt)("h3",{id:"if--else"},"If / else"),(0,i.kt)("p",null,"Put a space before and after the control statement in brackets, and separate the operators by spaces within the brackets. Use inner brackets to improve logical grouping if it helps."),(0,i.kt)("p",null,"Indent with four spaces."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Do not use ",(0,i.kt)("inlineCode",{parentName:"h5"},"elseif"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Always use the ",(0,i.kt)("inlineCode",{parentName:"p"},"else if")," variant"))),(0,i.kt)("p",null,"Always use braces (even if the block is one line and PHP doesn't require it). The opening brace of a block is always placed on the same line as its corresponding statement or declaration."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"if ($x == $y) {\n    $a = $b;\n} else if ($x == $z) {\n    $a = $c;\n} else {\n    $a = $d;\n}\n"))),(0,i.kt)("h3",{id:"switch"},"Switch"),(0,i.kt)("p",null,"Put a space before and after the control statement in brackets, and separate the operators by spaces within the brackets. Use inner brackets to improve logical grouping if it helps."),(0,i.kt)("p",null,"Always indent with four spaces. Content under each case statement should be indented a further four spaces."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"switch ($something) {\n    case 1:\n        break;\n\n    case 2:\n        break;\n\n    default:\n        break;\n}\n"))),(0,i.kt)("h3",{id:"foreach"},"Foreach"),(0,i.kt)("p",null,"As above, uses spaces like this:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"foreach ($objects as $key => $thing) {\n    process($thing);\n}\n"))),(0,i.kt)("h3",{id:"ternary-operator"},"Ternary Operator"),(0,i.kt)("p",null,"The ternary operator is only permitted to be used for ",(0,i.kt)("strong",{parentName:"p"},"short"),", ",(0,i.kt)("strong",{parentName:"p"},"simple to understand")," statements. If the statement can't be understood in one sentence, use an if statement instead."),(0,i.kt)("p",null,"Whitespace must be used around the operators to make it clear where the operation is taking place."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$username = isset($user->username) ? $user->username : *; **\n$users = is_array($users) ? $users : [$users];\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$toload = (empty($CFG->navshowallcourses))?self::LOAD_ROOT_CATEGORIES:self::LOAD_ALL_CATEGORIES;\n$coefstring = ($coefstring==* or $coefstring=='aggregationcoefextrasum') ? 'aggregationcoefextrasum' : 'aggregationcoef';\n"))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Since PHP 7.0, many of those ",(0,i.kt)("inlineCode",{parentName:"p"},"isset()")," ternaries can be changed to use the new shorthand ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.null-coalesce-op"},"null coalescing operator")," so, the above is equivalent to:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$username = $user->username ?? *;\n")))),(0,i.kt)("h2",{id:"require--include"},"Require / include"),(0,i.kt)("p",null,"Each file that is accessed via browser should start by including the main config.php file."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"require(__DIR__ . '/../../config.php');\n"))),(0,i.kt)("p",null,"Any other include/require should use a path starting with ",(0,i.kt)("inlineCode",{parentName:"p"},"__DIR__")," or an absolute path starting with ",(0,i.kt)("inlineCode",{parentName:"p"},"$CFG->dirroot")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"$CFG->libdir"),'. Relative includes starting with "../" can ',(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.include.php"},"sometimes behave strangely under PHP"),", so should not be used. Our ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/CLI_scripts"},"CLI scripts"),' must not use relative config.php paths starting with "../".'),(0,i.kt)("p",null,"For library files in normal usage, require_once should be used (this is different from config.php which should always use 'require' as above). Examples:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"require_once(__DIR__ . '/locallib.php');\nrequire_once($CFG->libdir . '/filelib.php');\n"))),(0,i.kt)("p",null,"Includes should generally only be done at the top of files or inside functions/methods that need them. Using include/require in the middle of a file in global scope very hard to audit the security of the code."),(0,i.kt)("p",null,"All other scripts with the exception of imported 3rd party libraries and files without ",(0,i.kt)("em",{parentName:"p"},"side-effects")," (that is single class definitions, interfaces or traits), should use following code at the very top to prevent direct execution which might reveal error messages on misconfigured production servers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"defined('MOODLE_INTERNAL') || die();\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Side-effects")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The term side-effects refers to any global scope code not being:"),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"namespace"),";"),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"use")," statements;"),(0,i.kt)("li",{parentName:"ul"},"namespace constants; or"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"strict_types")," declarations (declarations in general).")))),(0,i.kt)("p",null,"Please note that the existence or absence of side-effects in a file only affects as explained above, at code level. It shouldn't be considered in other parts of the coding style unless specifically mentioned."),(0,i.kt)("h2",{id:"documentation-and-comments"},"Documentation and comments"),(0,i.kt)("p",null,"Code documentation explains the code flow and the purpose of functions and variables. Use it whenever practical."),(0,i.kt)("h3",{id:"phpdoc"},"PHPDoc"),(0,i.kt)("p",null,'Moodle stays as close as possible to "standard" ',(0,i.kt)("a",{parentName:"p",href:"https://www.phpdoc.org/"},"PHPDoc format")," to document our files, classes and functions. This helps IDEs (like Netbeans or Eclipse) work properly for Moodle developers, and also allows us to generate web documentation automatically."),(0,i.kt)("p",null,"PHPDoc has a number of tags that can be used in different places (files, classes and functions). We have some particular rules for using them in Moodle that you must follow:"),(0,i.kt)("h4",{id:"types"},"Types"),(0,i.kt)("p",null,"Some of the tags below (@param, @return, etc.) do require the specification of a valid php type and a description. All these are allowed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PHP primitive types: int, bool, string, etc."),(0,i.kt)("li",{parentName:"ul"},"PHP complex types: array, stdClass (not Array, object)."),(0,i.kt)("li",{parentName:"ul"},"PHP classes:full or relative (to current namespace) class names."),(0,i.kt)("li",{parentName:"ul"},"true, false, null (always lowercase)."),(0,i.kt)("li",{parentName:"ul"},"static: for methods returning a new instance of the child/caller class."),(0,i.kt)("li",{parentName:"ul"},"self: for methods returning a new instance of the parent/called class."),(0,i.kt)("li",{parentName:"ul"},"$this: for methods returning the current instance of the class."),(0,i.kt)("li",{parentName:"ul"},'void: for methods with a explicit empty "return" statement.')),(0,i.kt)("p",null,"Also, there are some basic rules about how to use those types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We use ",(0,i.kt)("a",{parentName:"li",href:"https://www.php.net/manual/en/language.types.type-juggling.php"},"short type names")," (bool instead of boolean, int instead of integer)."),(0,i.kt)("li",{parentName:"ul"},'With cases represented as array of given type, it\'s highly recommended to document them as type[] instead of the simpler and less informative "array" alternative (for example ',(0,i.kt)("inlineCode",{parentName:"li"},"int[]")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"stdClass[]"),")."),(0,i.kt)("li",{parentName:"ul"},"When multiple different types are possible, they must be separated by a vertical bar (pipe) (for example ",(0,i.kt)("inlineCode",{parentName:"li"},"@return int|false"),")."),(0,i.kt)("li",{parentName:"ul"},"All primitives and keywords must be lowercase. The case of the complex types and classes must match the original.")),(0,i.kt)("h4",{id:"tags"},"Tags"),(0,i.kt)("h5",{id:"copyright"},(0,i.kt)("inlineCode",{parentName:"h5"},"@copyright")),(0,i.kt)("p",null,"These include the year and copyright holder (creator) of the original file. Do not change these in existing files!"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @copyright 2008 Kim Bloggs\n"))),(0,i.kt)("h5",{id:"license"},(0,i.kt)("inlineCode",{parentName:"h5"},"@license")),(0,i.kt)("p",null,"These must be GPL v3+ and use this format:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @license https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n"))),(0,i.kt)("h5",{id:"param"},(0,i.kt)("inlineCode",{parentName:"h5"},"@param")),(0,i.kt)("p",null,"Don't put hyphens or anything fancy after the variable name, just a space."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @param [[#Types|type]] $name Description.\n"))),(0,i.kt)("h5",{id:"return"},(0,i.kt)("inlineCode",{parentName:"h5"},"@return")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@return")," tag is mandatory if the function has a return statement, but can be left out if it does not have one."),(0,i.kt)("p",null,"The description portion is optional, it can be left out if the function is simple and already describes what is returned."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @return [[#Types|type]] Description.\n"))),(0,i.kt)("h5",{id:"var"},(0,i.kt)("inlineCode",{parentName:"h5"},"@var")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@var")," tag is used to document class properties."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @var [[#Types|type]] Description.\n"))),(0,i.kt)("p",null,"Exceptionally, when none of the available ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/#Types"},"types")," define the returned value, inline @var phpdocs (within the body of the methods) providing type hinting are allowed to the returned type. Don't abuse!"),(0,i.kt)("h5",{id:"uses"},(0,i.kt)("inlineCode",{parentName:"h5"},"@uses")),(0,i.kt)("p",null,"If a function uses die or exit, please add this tag to the docblock to help developers know this function could terminate the page:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @uses exit\n"))),(0,i.kt)("h5",{id:"access"},(0,i.kt)("inlineCode",{parentName:"h5"},"@access")),(0,i.kt)("p",null,"The access can be used to specify access control for an element"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Should only be used when the method definition does not already specify access control."),(0,i.kt)("li",{parentName:"ol"},"In the case of functions, specifying public access is redundant and so should be avoided.")),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @access private\n"))),(0,i.kt)("h5",{id:"package"},(0,i.kt)("inlineCode",{parentName:"h5"},"@package")),(0,i.kt)("p",null,"The package tag should always be used to label php files with the correct ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/Frankenstyle"},"Frankenstyle")," component name. Full rules are explained on that page, but in summary:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If the file is part of any component plugin, then use the plugin component name (for example ",(0,i.kt)("strong",{parentName:"li"},"mod_quiz")," or ",(0,i.kt)("strong",{parentName:"li"},"gradereport_xls"),")"),(0,i.kt)("li",{parentName:"ol"},"If the file is part of a core subsystem then it will be core_xxxx where xxxx is the name defined in get_core_subsystems(). (for example ",(0,i.kt)("strong",{parentName:"li"},"core_enrol")," or ",(0,i.kt)("strong",{parentName:"li"},"core_group"),")"),(0,i.kt)("li",{parentName:"ol"},"If the file is one of the select few files in core that are not part of a subsystem (such as lib/moodlelib.php) then it just as a package of ",(0,i.kt)("strong",{parentName:"li"},"core"),"."),(0,i.kt)("li",{parentName:"ol"},"Each file can only be part of ONE package.")),(0,i.kt)("p",null,"(We do not have standards for ",(0,i.kt)("inlineCode",{parentName:"p"},"@subpackage")," at all. You can use within your @package how you like.)"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @package gradereport_xls\n"))),(0,i.kt)("h5",{id:"category"},(0,i.kt)("inlineCode",{parentName:"h5"},"@category")),(0,i.kt)("p",null,"We use ",(0,i.kt)("inlineCode",{parentName:"p"},"@category")," only to highlight the public classes, functions or files that are part of one of our ",(0,i.kt)("a",{parentName:"p",href:"/docs/apis"},"Core APIs"),", or that provide good example implementations of a Core API. The value must be one of the ones on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/apis"},"API guides")," page."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"  @category preferences\n"))),(0,i.kt)("h5",{id:"since"},(0,i.kt)("inlineCode",{parentName:"h5"},"@since")),(0,i.kt)("p",null,"When adding a new classes or function to the Moodle core libraries (or adding a new method to an existing class), use a ",(0,i.kt)("inlineCode",{parentName:"p"},"@since")," tag to document which version of Moodle it was added in. For example:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"  @since Moodle 2.1\n"))),(0,i.kt)("h5",{id:"see"},(0,i.kt)("inlineCode",{parentName:"h5"},"@see")),(0,i.kt)("p",null,"If you want to refer the user to another related element (include, class, function, define, method, variable), but not to URLs, then you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"@see"),"."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @see some_other_function()\n"))),(0,i.kt)("p",null,"This tag can be used inline too, within phpdoc comments."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"   /**\n    * This function uses {@see get_string()} to obtain the currency names...\n    * .....\n"))),(0,i.kt)("h5",{id:"link"},(0,i.kt)("inlineCode",{parentName:"h5"},"@link")),(0,i.kt)("p",null,"If you want to refer the user to an external URL, but not to related elements, use @link."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  @link https://docs.moodle.org/dev/Core_APIs\n"))),(0,i.kt)("p",null,"This tag can be used inline too, within phpdoc comments."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"   /**\n    * For details about the implementation below, visit {@link https://docs.moodle.org/dev/Core_APIs} and read...\n    * .....\n"))),(0,i.kt)("h5",{id:"deprecated-and-todo"},(0,i.kt)("inlineCode",{parentName:"h5"},"@deprecated")," (and ",(0,i.kt)("inlineCode",{parentName:"h5"},"@todo"),")"),(0,i.kt)("p",null,"When deprecating an old API, use a ",(0,i.kt)("inlineCode",{parentName:"p"},"@deprecated")," tag to document which version of Moodle it was deprecated in, and add ",(0,i.kt)("inlineCode",{parentName:"p"},"@todo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@see")," if possible. Make sure to mention relevant MDL issues. For example:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * ...\n * @deprecated since Moodle 2.0 MDL-12345 - please do not use this function any more.\n * @todo MDL-22334 This will be deleted in Moodle 2.2.\n * @see class_name::new_function()\n */\n"))),(0,i.kt)("p",null,"If it is important that developers update their code, consider also adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"debugging('...', DEBUG_DEVELOPER);")," call to repeat the deprecated message. If the old function can no longer be supported at all, you may have to throw a coding_exception. There are examples of the various options in ",(0,i.kt)("inlineCode",{parentName:"p"},"lib/deprecatedlib.php"),"."),(0,i.kt)("h5",{id:"throws"},(0,i.kt)("inlineCode",{parentName:"h5"},"@throws")),(0,i.kt)("p",null,"This tag is valid and can be used optionally to indicate the method or function will throw and exception. This is to help developers know they may have to handle the exceptions from such functions."),(0,i.kt)("h5",{id:"other-specific-tags"},"Other specific tags"),(0,i.kt)("p",null,"There are some tags that are only allowed within some contexts and not globally. More precisely:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@Given"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"@When"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"@Then"),", within the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/Acceptance_testing#Adding_steps_definitions"},"behat steps definitions"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@covers"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"@coversDefaultClass"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"@coversNothing"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"@uses")," to better control coverage within ",(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/Writing_PHPUnit_tests#Generators"},"unit tests"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@dataProvider")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"@testWith"),", to provide example data and expectations, within ",(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/Writing_PHPUnit_tests#Generators"},"unit tests"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@depends"),", to express dependencies between tests, where each producer returned data in passed to consumers. See ",(0,i.kt)("a",{parentName:"li",href:"https://phpunit.readthedocs.io/en/9.5/writing-tests-for-phpunit.html#writing-tests-for-phpunit-examples-stacktest2-php"},(0,i.kt)("inlineCode",{parentName:"a"},"@depends")," examples")," for more information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@group"),", for easier collecting unit tests together, following the guidelines in the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/PHPUnit#Using_the_.40group_annotation"},"PHPUnit MoodleDocs"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@requires"),", to specify unit test requirements and skip if not fulfilled. See ",(0,i.kt)("a",{parentName:"li",href:"https://phpunit.readthedocs.io/en/9.5/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests-requires-tables-api"},(0,i.kt)("inlineCode",{parentName:"a"},"@requires")," usages")," for more information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@runTestsInSeparateProcesses")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"@runInSeparateProcess"),", to execute an individual test or a testcase in isolation. To be used only when strictly needed.")),(0,i.kt)("h3",{id:"files"},"Files"),(0,i.kt)("p",null,"All files that contain PHP code should contain, without any blank line after the php open tag, a full GPL copyright statement at the top, plus a SEPARATE docblock right under it containing a:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"short one-line description of the file"),(0,i.kt)("li",{parentName:"ol"},"longer description of the file"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"@package")," tag (required)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"@category")," tag (only when everything in the file is related to one of the ",(0,i.kt)("a",{parentName:"li",href:"/docs/apis"},"Core APIs"),")"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"@copyright")," (required)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"@license")," (required)")),(0,i.kt)("p",null,'For files containing only one artifact, the file phpdoc block is optional as long as the artifact (class, interface, trait, etc.) is documented. Read the following "Classes" section about that case.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * This is a one-line short description of the file.\n *\n * You can have a rather longer description of the file as well,\n * if you like, and it can span multiple lines.\n *\n * @package    mod_mymodule\n * @category   backup\n * @copyright  2008 Kim Bloggs\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n")),(0,i.kt)("h3",{id:"phpdoc-classes"},"Classes"),(0,i.kt)("p",null,"All classes must have a complete docblock like this:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * Short description for class.\n *\n * Long description for class (if any)...\n *\n * @package    mod_mymodule\n * @category   backup\n * @copyright  2008 Kim Bloggs\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass policy_issue {\n"))),(0,i.kt)("p",null,"For files containing only one artifact (class, interface, trait, etc.), specifically for all the files within ",(0,i.kt)("inlineCode",{parentName:"p"},"classes")," directories, but also any other file fulfilling the condition anywhere else, it will be enough with the class phpdoc block. The file phpdoc block will be considered optional at all effects, giving to the class one precedence."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/#@package"},"@package"),", ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/#@copyright"},"@copyright")," and ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/#@license"},"@license")," tags (and the optional ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/#@category"},"@category")," tag ), as shown in the example above, must be present always in the file (in whichever docblock, but all together)."),(0,i.kt)("h3",{id:"properties"},"Properties"),(0,i.kt)("p",null,"All properties should have a docblock with the following minimum information:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class example {\n    /** @var string This variable does something */\n    protected $something;\n}\n"))),(0,i.kt)("p",null,"or"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class example {\n    /**\n     * This variable does something and has a very long description which can\n     * wrap on multiple lines\n     * @var string\n     */\n    protected $something;\n}\n"))),(0,i.kt)("p",null,"Even if there are several properties all sharing something in common, do not use ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PHPDoc#DocBlock_Templates"},"DocBlock templates"),". Instead, document every property explicitly as in the following example:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class zebra {\n    /** @var int The number of white stripes */\n    protected $whitestripes = 0;\n\n    /** @var int The number of black stripes */\n    protected $blackstripes = 0;\n\n    /** @var int The number of red stripes */\n    protected $redstripes = 0;\n}\n"))),(0,i.kt)("h3",{id:"constants-1"},"Constants"),(0,i.kt)("p",null,"Class constants should be documented in the following way:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"class sam {\n   /**\n    * This is used when Sam is in a good mood.\n    */\n   const MOOD_GOOD = 0;\n}\n"))),(0,i.kt)("h3",{id:"functions"},"Functions"),(0,i.kt)("p",null,"All functions and methods should have a complete docblock like this:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * The description should be first, with asterisks laid out exactly\n * like this example. If you want to refer to a another function,\n * use @see as below. If it's useful to link to Moodle\n * documentation on the web, you can use a @link below or also\n * inline like this {@link https://docs.moodle.org/dev/something}\n * Then, add descriptions for each parameter and the return value as follows.\n *\n * @see clean_param()\n * @param int   $postid The PHP type is followed by the variable name\n * @param array $scale The PHP type is followed by the variable name\n * @param array $ratings The PHP type is followed by the variable name\n * @return bool A status indicating success or failure\n */\n"))),(0,i.kt)("p",null,"You must include a description even if it appears to be obvious from the ",(0,i.kt)("inlineCode",{parentName:"p"},"@param")," and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"@return")," lines."),(0,i.kt)("p",null,"An exception is made for overridden methods which make no change to the meaning of the parent method and maintain the same arguments/return values. In this case you should omit the comment completely. Use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"@inheritdoc")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@see")," tags is explicitly forbidden as a replacement for any complete docblock."),(0,i.kt)("h3",{id:"defines"},"Defines"),(0,i.kt)("p",null,"All defines should be documented in the following way:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * PARAM_INT - integers only, use when expecting only numbers.\n */\ndefine('PARAM_INT', 'int');\n\n/**\n * PARAM_ALPHANUM - expected numbers and letters only.\n */\ndefine('PARAM_ALPHANUM', 'alphanum');\n"))),(0,i.kt)("h3",{id:"inline-comments"},"Inline comments"),(0,i.kt)("p",null,"Inline comments must use the \"// \" (2 slashes + whitespace) style, laid out neatly so that it fits among the code and lines up with it.\nThe first line of the comment must begin with a capital letter (or a digit, or '...') and the comment must end with a proper punctuation character. Permitted final characters are '.', '?' or '!'."),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"function forum_get_ratings_mean($postid, $scale, $ratings = null) {\n    if (!$ratings) {\n\n        $ratings = [];     // Initialize the empty array.\n\n        $rates = $DB->get_records('forum_ratings', ['post' => $postid)];\n\n        // ... then process each rating in\n        // turn.\n        foreach ($rates as $rate) {\n            do_something_with($rate);\n        }\n\n        // Do we need to tidy up?\n        if (!empty($rates))\n            // 42 more things happen here!\n            finsh_up();\n        }\n"))),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="An example of correct single-line comment styling"',title:'"An',example:!0,of:!0,correct:!0,"single-line":!0,comment:!0,'styling"':!0},"// Comment explaining this piece of code.\n"))),(0,i.kt)(s.vL,{mdxType:"InvalidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Example of incorrect commenting"',title:'"Example',of:!0,incorrect:!0,'commenting"':!0},"/*  Comment explaining this piece of code. */\n# Comment explaining this piece of code.\n// comment explaining this piece of code (without capital letter and punctuation)\n"))),(0,i.kt)("p",null,"If your comment is due to some MDL issue, please feel free to include the correct MDL-12345 in your comment. This makes it easier to track down decisions and discussions about things."),(0,i.kt)("h4",{id:"using-todo"},"Using TODO"),(0,i.kt)("p",null,"This is especially important if you know an issue still exists in that code that should be dealt with later. Use a TODO along with a MDL code to mark this. For example:"),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// TODO MDL-12345 This works but is a bit of a hack and should be revised in future.\n"))),(0,i.kt)("p",null,"If you have a big task that is nearly done, apart a few TODOs, and you really want to mark the big task as finished, then you should file new tracker tasks for each TODO and change the TODOs comments to point at the new issue numbers."),(0,i.kt)("p",null,'There is a nice "to-do checker" reporting tool, restricted to admins and available via web @ ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/moodle/moodle/blob/master/lib/tests/other/todochecker.php"},(0,i.kt)("inlineCode",{parentName:"a"},"lib/tests/other/todochecker.php")),"."),(0,i.kt)("p",null,"Finally, don't forget to add any MDL-12345 used by your TODOs (and @todos too, unless part of the ",(0,i.kt)("a",{parentName:"p",href:"/general/development/policies/deprecation"},"deprecation process"),', those are handled apart) to the "Review TODOs Epic": MDL-47779 (requires login to see the issues)'),(0,i.kt)("h3",{id:"cvs-keywords"},"CVS keywords"),(0,i.kt)("p",null,"We have stopped using CVS keywords such as $Id$ in Moodle 2.0 completely."),(0,i.kt)("h2",{id:"exceptions"},"Exceptions"),(0,i.kt)("p",null,"Use exceptions to report errors, especially in library code."),(0,i.kt)("p",null,"Throwing an exception has almost exactly the same effect as calling print_error(), but it is more flexible. For example, the caller can choose to catch the exception and handle it in some way. It also makes it easier to write unit tests."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Since 2021, it has been ",(0,i.kt)("a",{parentName:"p",href:"https://tracker.moodle.org/browse/MDL-69936"},"agreed to deprecate ",(0,i.kt)("inlineCode",{parentName:"a"},"print_error()"))," and, instead, to ",(0,i.kt)("inlineCode",{parentName:"p"},"throw moodle_exception()")," is the correct way to proceed."))),(0,i.kt)("p",null,'Any exception that is not caught will trigger an appropriate call to print_error, to report the problem to the user. Exceptions "error codes" will be translated only when they are meant to be shown to final users.'),(0,i.kt)("p",null,"Do not abuse exceptions for normal code flow. Exceptions should only be used in erroneous situations."),(0,i.kt)("h3",{id:"exception-classes"},"Exception classes"),(0,i.kt)("p",null,"We have a set of custom exception classes. The base class is moodle_exception. You will see that the arguments you pass to new ",(0,i.kt)("inlineCode",{parentName:"p"},"moodle_exception(...)")," are very similar to the ones you would pass to print_error. There are more specific subclasses for particular types of error."),(0,i.kt)("p",null,"To get the full list of exception types, search for the regular expression 'class +\\w+_exception +extends' or ask your IDE to list all the subclasses of moodle_exception."),(0,i.kt)("p",null,"Where appropriate, you should create new subclasses of moodle_exception for use in your code."),(0,i.kt)("p",null,"A few notable exception types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"moodle_exception"),": base class for exceptions in Moodle. Use this when a more specific type is not appropriate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"coding_exception"),": thrown when the problem seems to be caused by a developer's mistake. Often thrown by core code that interacts with plugins. If you throw an exception of this type, try to make the error message helpful to the plugin author, so they know how to fix their code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dml_exception")," (and subclasses): thrown when a database query fails."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_exception")," thrown by the File API.")),(0,i.kt)("h2",{id:"dangerous-functions-and-constructs"},"Dangerous functions and constructs"),(0,i.kt)("p",null,"PHP includes multiple questionable features that are highly discouraged because they are very often source of serious security problems."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"do not use ",(0,i.kt)("inlineCode",{parentName:"li"},"eval()")," function - language packs are exception (to be solved in future)."),(0,i.kt)("li",{parentName:"ol"},"do not use ",(0,i.kt)("inlineCode",{parentName:"li"},"preg_replace()")," with /e modifier - use callbacks in order to prevent unintended PHP execution."),(0,i.kt)("li",{parentName:"ol"},"do not use backticks for shell command execution."),(0,i.kt)("li",{parentName:"ol"},"do not use ",(0,i.kt)("inlineCode",{parentName:"li"},"goto"),", neither the operator neither labels - use other programming techniques to control the execution flow.")),(0,i.kt)("h2",{id:"policy-about-coding-style-only-fixes"},"Policy about coding-style only fixes"),(0,i.kt)("p",null,"Way before this coding-style guide was defined and agreed, a lot of code had been written already. Obviously such code does not follow the coding-style at all. While ",(0,i.kt)("strong",{parentName:"p"},"we enforce conformance for all the new code"),", we are not paranoid about the status of all the previous one."),(0,i.kt)("p",null,"In any case, in order to normalize the (progressive, non-critical) transition, a policy issue (MDL-43233) was created and agreed about. And these are the rules to apply to coding-style only changes:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Related coding-style changes (same lines, a variable within a method/function, adjacent comments, etc.) within a real issue are allowed."),(0,i.kt)("li",{parentName:"ol"},"Unrelated coding-style changes (other methods, blocks of code, comments, etc.) within a real issue are only accepted for master and in a separate commit."),(0,i.kt)("li",{parentName:"ol"},"Coding-style only issues are only accepted for master along the first 2 months of every cycle.")),(0,i.kt)("h2",{id:"git-commits"},"Git commits"),(0,i.kt)("p",null,"Constructing a clear and informative commit is an important aspect of the craft of creating open source code and the history of commits is a vital part of the communication between developers. Time should be spent on crafting commits appropriately and using the git tools to achieve it."),(0,i.kt)("p",null,"Git commits should:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tell a perfect, cleaned up version of the history. As if the code was written perfectly first time."),(0,i.kt)("li",{parentName:"ul"},"Include the MDL-xxxx issue number associated with the change"),(0,i.kt)("li",{parentName:"ul"},"Include CODE AREA when appropriate. (Code area, is just a short name for the area of Moodle that this change affects. It can be a component name if that makes sense, but does not have to be. Remember that your audience here is humans not computers, so if a shortened version of a component name is more readable and distinctive, use that instead.)"),(0,i.kt)("li",{parentName:"ul"},"Be formatted as:")),(0,i.kt)(s.Zh,{mdxType:"ValidExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MDL-xxxx CODE AREA: short summary (72 chars soft limit)\n\nBlank line on line 2, followed by an unlimited length detailed explanation\nfollowing if necessary. This section might include the motivation for the change\nand contrast it with the previous behaviour.\n"))),(0,i.kt)("p",null,"Git commits should not:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Include changes from bugs found and fixed before integration"),(0,i.kt)("li",{parentName:"ul"},"Include many separate revisions to the same lines of code for a single issue"),(0,i.kt)("li",{parentName:"ul"},"Arbitrarily split when part of a atomic set of logical changes")),(0,i.kt)("p",null,"For more guidance, see ",(0,i.kt)("a",{parentName:"p",href:"https://docs.moodle.org/dev/Commit_cheat_sheet"},"Commit cheat sheet")),(0,i.kt)("h2",{id:"credits"},"Credits"),(0,i.kt)("p",null,"This document was drawn from the following sources:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The original ",(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/en/index.php?title=Development:Coding&oldid=976"},"Coding guidelines")," page"),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("a",{parentName:"li",href:"http://framework.zend.com/manual/en/coding-standard.html"},"Zend guidelines")," and"),(0,i.kt)("li",{parentName:"ol"},"Feedback from all core Moodle developers")),(0,i.kt)("h2",{id:"see-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/Javascript/Coding_Style"},"JavaScript Coding Style")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.moodle.org/dev/CSS_Coding_Style"},"CSS Coding Style")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/general/development/policies/codingstyle/sql"},"SQL coding style")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/general/development/policies"},"Coding")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/devdocs/general/development/policies/codingstyle/"},"CodeSniffer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://moodle.org/plugins/local_codechecker"},"Code Checker plugin")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./accessibility#Moodle-related-accessibility-coding-guidelines"},"Accessibility coding guidelines"))))}g.isMDXComponent=!0},85162:function(e,t,a){"use strict";a.d(t,{Z:function(){return o}});var n=a(67294),l=a(86010),i="tabItem_Ymn6";function o(e){var t=e.children,a=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,o),hidden:a},t)}},65488:function(e,t,a){"use strict";a.d(t,{Z:function(){return u}});var n=a(83117),l=a(67294),i=a(86010),o=a(72389),s=a(67392),r=a(7094),p=a(12466),d="tabList__CuJ",c="tabItem_LNqP";function m(e){var t,a,o=e.lazy,m=e.block,u=e.defaultValue,h=e.values,g=e.groupId,k=e.className,f=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,s.l)(v,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===u?u:null!=(t=null!=u?u:null==(a=f.find((function(e){return e.props.default})))?void 0:a.props.value)?t:f[0].props.value;if(null!==N&&!v.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,r.U)(),w=b.tabGroupChoices,x=b.setTabGroupChoices,T=(0,l.useState)(N),C=T[0],E=T[1],_=[],$=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var M=w[g];null!=M&&M!==C&&v.some((function(e){return e.value===M}))&&E(M)}var P=function(e){var t=e.currentTarget,a=_.indexOf(t),n=v[a].value;n!==C&&($(t),E(n),null!=g&&x(g,String(n)))},A=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,l=_.indexOf(e.currentTarget)+1;a=null!=(n=_[l])?n:_[0];break;case"ArrowLeft":var i,o=_.indexOf(e.currentTarget)-1;a=null!=(i=_[o])?i:_[_.length-1]}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",d)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":m},k)},v.map((function(e){var t=e.value,a=e.label,o=e.attributes;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return _.push(e)},onKeyDown:A,onFocus:P,onClick:P},o,{className:(0,i.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":C===t})}),null!=a?a:t)}))),o?(0,l.cloneElement)(f.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function u(e){var t=(0,o.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}},32798:function(e){e.exports={siteHome:"https://moodle.academy/",courses:{setup:{id:29,name:"Set up your Moodle Development Environment",summary:"Learn about the Moodle developer community and setting up a development environment",description:"This course is designed for PHP developers who want to start developing Moodle plugins. You will learn about the Moodle developer community and set up a Moodle development environment. This is the first course in the Developer Pathway. Subsequent courses in the the Developer Pathway will build on the knowledge gained in this course.",tags:["development","basics","setup"],archived:!1,series:[]},securityEssentials:{id:53,name:"Moodle Access and Security Essentials",summary:"A short course looking at access control and security aspects of plugins.",description:"In this course we look at access control and security aspects of a plugin. Through a set of tutorials, you will learn how to control access to your plugin using Moodle's Access API. You will learn how to define capabilities in your plugin and how to determine if the user has the permission to access a page. This course also covers common security threats that developers need to be aware of.\n\nThis is the fourth course in the Moodle Developer Basics program.",tags:["development","basic","essentials","security","api"],archived:!1,series:["basics"]},outputEssentials:{id:49,name:"Web Output Essentials",summary:"Learn how to use Moodle's Page and Output APIs to display content in a local plugin.",description:"This course builds on the knowledge gained in the Moodle development environment course. In this course, we learn how to use Moodle's Page and Output APIs to display content in a local plugin. An introduction to localisation using language strings is also covered in this course. This is the second course in the Moodle developer pathway.",tags:["development","basics","essentials","output","api"],archived:!1,series:["basics"]},architecture:{id:51,name:"Moodle's Modular Architecture and APIs",summary:"Take a deeper look at Moodle's architecture, exploring common APIs including Navigations, Forms, Database, Upgrade, Strings, and Output.",description:"In this course we take a deeper look at Moodle's modular architecture and explore the use of common Moodle APIs. Some of the APIs covered in this course include: Navigation, Forms, Database access, Upgrade, Strings and Output APIs. Learners get hands-on practise on using these APIs in the form of developing a local plugin.\n\nThis is the third course in the Moodle Developer Basics program.",tags:["development","api","architecture"],archived:!1,series:["basics"]},pluginBasics:{id:10,name:"Moodle Plugin Development Basics",summary:"Learn about the essential concepts in Moodle's moduel architecture.",description:"This course teaches you essential concepts related to Moodle's modular architecture, enabling you to develop a simple demo plugin.\n\nPlease note, this course is being migrated to form a new program of short courses on Moodle Academy (called 'Moodle Developer Basics'), which will all be available at the end of April 2022. For now you may still complete the course on Learn Moodle, or you might like to start the Moodle Academy developer short courses that are being released over the coming weeks and will form this new beginner level program.",tags:["development","basics","essentials","api","plugins","architecture"],archived:!1,series:["basics"]}}}},50793:function(e,t,a){"use strict";a.d(t,{dn:function(){return C.Z},vL:function(){return T},U6:function(){return b},E2:function(){return E.Z},mQ:function(){return _.Z},Zh:function(){return x}});a(86134);var n=a(67294),l=a(87918),i=a(80102),o=a(83117),s=a(95408),r=a(98700),p=a(39707),d=a(59766),c=a(69348),m=a(54502),u=a(85893);const h=["component","direction","spacing","divider","children"];function g(e,t){const a=n.Children.toArray(e).filter(Boolean);return a.reduce(((e,l,i)=>(e.push(l),i<a.length-1&&e.push(n.cloneElement(t,{key:`separator-${i}`})),e)),[])}const k=(0,c.ZP)("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>[t.root]})((({ownerState:e,theme:t})=>{let a=(0,o.Z)({display:"flex"},(0,s.k9)({theme:t},(0,s.P$)({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e}))));if(e.spacing){const n=(0,r.hB)(t),l=Object.keys(t.breakpoints.values).reduce(((t,a)=>(null==e.spacing[a]&&null==e.direction[a]||(t[a]=!0),t)),{}),i=(0,s.P$)({values:e.direction,base:l}),o=(0,s.P$)({values:e.spacing,base:l}),p=(t,a)=>{return{"& > :not(style) + :not(style)":{margin:0,[`margin${l=a?i[a]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[l]}`]:(0,r.NA)(n,t)}};var l};a=(0,d.Z)(a,(0,s.k9)({theme:t},o,p))}return a})),f=n.forwardRef((function(e,t){const a=(0,m.Z)({props:e,name:"MuiStack"}),n=(0,p.Z)(a),{component:l="div",direction:s="column",spacing:r=0,divider:d,children:c}=n,f=(0,i.Z)(n,h),v={direction:s,spacing:r};return(0,u.jsx)(k,(0,o.Z)({as:l,ownerState:v,ref:t},f,{children:d?g(c,d):c}))}));var v=f,y=a(39960);function N(e,t,a){var i=function(e){return"number"==typeof e&&Number.isInteger(e)?e.toFixed(1):e}(t),o=n.createElement("span",null,function(e){if("since"===e)return"Since";if("deprecated"===e)return"Deprecated";throw new Error("Unknown <Since> type: '"+e+"'")}(e)," ",i),s=n.createElement(l.Z,{key:"chip-"+e+i,label:o,clickable:!!a});return a?n.createElement(y.Z,{to:"https://tracker.moodle.org/browse/"+a,key:"link-"+e+i},s):s}function b(e){var t,a,l,i,o,s,r,p,d,c=(a=(t=e).issueNumber,l=void 0===a?null:a,i=t.type,o=void 0===i?"since":i,s=t.versions,r=void 0===s?[]:s,p=t.version,(d=void 0===p?null:p)?N(o,d,l):r.map((function(e){return N(o,e,l)})));return n.createElement(v,{direction:"row",justifyContent:"flex-end",spacing:2},c)}var w=a(86010);function x(e){return n.createElement("div",{className:(0,w.Z)(" alert alert--success margin-bottom--lg ")},n.createElement("span",{className:(0,w.Z)(" badge badge--success ")},"An example of correct behaviour"),e.children)}function T(e){return n.createElement("div",{className:(0,w.Z)(" alert alert--danger margin-bottom--lg ")},n.createElement("span",{className:(0,w.Z)(" badge badge--danger ")},"An example of incorrect behaviour"),e.children)}a(80069);var C=a(46975),E=a(85162),_=a(65488)},86134:function(e,t,a){"use strict";a.d(t,{Z:function(){return d}});var n=a(67294),l=a(69119),i=a(39960),o=a(88698),s=a(32798),r=a.n(s),p=a(80684);function d(e){var t=e.courseName;if(!r().courses[t])throw Error("Unknown course "+t);var a=r().courses[t];return n.createElement(l.Z,{type:"info",icon:n.createElement(o.Z,{fontSize:"inherit"}),title:"Learn more on Moodle Academy"},"You can learn more about"," ",n.createElement("strong",null,e.subject)," ","from the"," ",n.createElement(p.Z,{title:a.summary},n.createElement(i.Z,{to:r().siteHome+"course/view.php?id="+a.id},a.name))," ","on Moodle Academy.")}},80069:function(e,t,a){"use strict";a.d(t,{Z:function(){return d}});var n=a(67294),l=a(87918),i=a(80684),o=a(86886),s=a(34673),r=a(3905),p=function(e,t,a){return void 0===a&&(a="info"),n.createElement(o.ZP,{item:!0,key:e},n.createElement(i.Z,{title:t},n.createElement(l.Z,{label:e,color:a})))};function d(e){var t=e.filepath,a=e.summary,l=function(e){var t=e.required,a=void 0!==t&&t,n=e.legacy,l=void 0!==n&&n,i=e.deprecated,o=void 0!==i&&i,s=e.refreshedDuringUpgrade,r=void 0!==s&&s,d=e.refreshedDuringPurge,c=void 0!==d&&d,m=[];return r&&m.push(p("Upgradable","Changes to this file or directory will be re-applied during a Moodle upgrade. If you make any changes to it, you can simply increment the version number and perform a Moodle upgrade.","info")),c&&m.push(p("Refreshed on cache purge","The contents of this file or directory are cached. To see your changes you can simply purge Moodle's caches and refresh the page.","info")),a&&m.push(p("Required","This file must be present","success")),l&&m.push(p("Legacy","Use of this file is being phased out. It is still supported for older installations but will be removed..","warning")),o&&m.push(p("Deprecated","Use of this file is deprecated and not recommended.It may still be provided for older versions of Moodle but is no longer used.","error")),m}(e),i=e.description?n.createElement(o.ZP,{item:!0,xs:12},e.description):null;return n.createElement(r.Zo,null,n.createElement(o.ZP,{container:!0,spacing:2},n.createElement(o.ZP,{item:!0,xs:6},n.createElement("h4",null,a)),n.createElement(o.ZP,{item:!0,xs:6},n.createElement(o.ZP,{container:!0,spacing:2,justifyContent:"flex-end"},l)),n.createElement(o.ZP,{item:!0,xs:12},n.createElement("h5",null,"File path:"," ",t)),i,function(e){var t=e.example,a=e.open,l=void 0!==a&&a;return t?n.createElement(o.ZP,{item:!0,xs:12},n.createElement(s.Z,{summary:n.createElement("summary",null,"View example"),open:l},t)):null}(e)))}}}]);