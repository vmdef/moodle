{"version":3,"sources":["../src/imagepaster.js"],"names":["define","$","Log","Config","ImagePaster","textarea","imagepickeroptions","callback","self","initPasteListener","prototype","on","e","items","originalEvent","clipboardData","i","item","length","type","indexOf","uploadImage","getAsFile","file","filename","Math","random","toString","replace","name","repositorykeys","window","Object","keys","repositories","formdata","FormData","uploadrepofound","append","id","itemid","author","env","sesskey","client_id","context","ajax","wwwroot","data","dataType","processData","contentType","async","done","res","error","errorcode","fail","status","statusText","init","textareaorid","document","getElementById"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allows images to be pasted into textarea editor field.\n *\n * @module      editor_marklar/imagepaster\n * @package     editor_marklar\n * @copyright   2018 David Mudr√°k <david@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log', 'core/config'], function($, Log, Config) {\n\n    \"use strict\";\n\n    /**\n     * Prepare a new image paster instance.\n     *\n     * @constructor\n     * @param {jQuery} textarea - Editor's textarea element.\n     * @param {Object} imagepickeroptions - Filepicker component used for uploading.\n     * @param {function(Object)} callback - Function to run when the pasted image has been uploaded.\n     */\n    function ImagePaster(textarea, imagepickeroptions, callback) {\n        var self = this;\n\n        self.textarea = textarea;\n        self.imagepickeroptions = imagepickeroptions;\n        self.callback = callback;\n\n        self.initPasteListener();\n    }\n\n    /**\n     * Register a handler listening to the paste event in the textarea.\n     */\n    ImagePaster.prototype.initPasteListener = function() {\n        var self = this;\n\n        self.textarea.on('paste', function(e) {\n            var items = e.originalEvent.clipboardData.items;\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                if (item.type.indexOf('image/') === 0) {\n                    self.uploadImage(item.getAsFile());\n                }\n            }\n        });\n    };\n\n    /**\n     * Upload the pasted file to Moodle.\n     *\n     * @param {File} file - Pasted file.\n     */\n    ImagePaster.prototype.uploadImage = function(file) {\n        var self = this;\n\n        var filename = (Math.random() * 1000).toString().replace('.', '') + '_' + file.name;\n        var repositorykeys = window.Object.keys(self.imagepickeroptions.repositories);\n        var formdata = new window.FormData();\n        var uploadrepofound = false;\n\n        for (var i = 0; i < repositorykeys.length; i++) {\n            if (self.imagepickeroptions.repositories[repositorykeys[i]].type === 'upload') {\n                formdata.append('repo_id', self.imagepickeroptions.repositories[repositorykeys[i]].id);\n                uploadrepofound = true;\n                break;\n            }\n        }\n\n        if (!uploadrepofound) {\n            return;\n        }\n\n        formdata.append('repo_upload_file', file, filename);\n        formdata.append('itemid', self.imagepickeroptions.itemid);\n        formdata.append('author', self.imagepickeroptions.author);\n        formdata.append('env', self.imagepickeroptions.env);\n        formdata.append('sesskey', Config.sesskey);\n        formdata.append('client_id', self.imagepickeroptions.client_id);\n\n        if (self.imagepickeroptions.context.id) {\n            formdata.append('ctx_id', self.imagepickeroptions.context.id);\n        }\n\n        $.ajax(Config.wwwroot + '/repository/repository_ajax.php?action=upload', {\n            type: 'POST',\n            data: formdata,\n            dataType: 'json',\n            processData: false,\n            contentType: false,\n            async: true\n        }).done(function(res) {\n            if ('error' in res) {\n                Log.error('imagepaster: error uploading image: ' + res.errorcode + ': ' + res.error);\n            } else {\n                self.callback(res);\n            }\n        }).fail(function(error) {\n            Log.error('imagepaster: error uploading image: ' + error.status + ' ' + error.statusText);\n        });\n    };\n\n    return {\n        /**\n         * Initialize the image paster module.\n         *\n         * The callback will be run when the file is sucessfully uploaded. It will\n         * be given the object returned by repository_upload::process_upload():\n         *  - url: draftfile URL of the uploaded file\n         *  - id: itemid of the uploaded file\n         *  - file: name of the uploaded file\n         *\n         * @method\n         * @param {jQuery|Element|string} textareaorid - Editor's textarea element or its id.\n         * @param {Object} imagepickeroptions - Filepicker component used for uploading.\n         * @param {function(Object)} callback - Function to run when the pasted image has been uploaded.\n         * @returns {ImagePaster|bool} - ImagePaster instance or false on error.\n         */\n        init: function(textareaorid, imagepickeroptions, callback) {\n\n            var textarea;\n\n            if (typeof textareaorid === 'string') {\n                textarea = $(document.getElementById(textareaorid));\n\n            } else {\n                textarea = $(textareaorid);\n            }\n\n            if (!textarea.length) {\n                Log.error('imagepaster: invalid editor textarea element');\n                return false;\n            }\n\n            if (!imagepickeroptions) {\n                Log.error('imagepaster: invalid image picker options');\n                return false;\n            }\n\n            if (!callback || typeof callback != 'function') {\n                Log.error('imagepaster: invalid callback specified');\n                return false;\n            }\n\n            return new ImagePaster(textarea, imagepickeroptions, callback);\n        }\n    };\n});\n"],"file":"imagepaster.min.js"}